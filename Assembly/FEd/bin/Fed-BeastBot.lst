
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass.exe --long-address --flat -b --m65816 -oFed\bin\Fed.pgx --list=Fed\bin\Fed.lst --labels=Fed\bin\Fed.lbl .\Fed\Fed.asm
; Tue Feb 16 15:35:58 2021

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: .\Fed\Fed.asm


;******  Processing file: .\Fed\../Common/PGX.asm

>2000	50 47 58			               .text "PGX"
>2003	01				               .byte $01
>2004	08 20 00 00			               .dword START

;******  Return to file: .\Fed\Fed.asm


;******  Processing file: .\Fed\../Common/Macros.asm


;******  Return to file: .\Fed\Fed.asm


;******  Processing file: .\Fed\../Common/Kernel.asm

=$00101c				PUTS                    = $00101C              ; Print a string to the currently selected channel
=$001018				PUTC                    = $001018
=$00106c				PRINTCR                 = $00106C
=$001080				PRINTAH                 = $001080
=$001078				FK_IPRINTH              = $001078
=$001084				LOCATE                  = $001084
=$00112c				FK_SETSIZES             = $00112C
=$00001e				CUR_COLOR               = $00001E
=$af0004				BORDER_CTRL_REG	        = $AF0004
=$afa000				SCREEN_TEXT_MEM         = $AFA000
=$afc000				SCREEN_TEXT_COL         = $AFC000
=80					NUM_COLS                = 80
=60					NUM_ROWS                = 60

;******  Return to file: .\Fed\Fed.asm

=$20					TEXT_COLOR              = $20
=$010000				LOADBLOCK               = $010000         ; File loading will start here
=$001118				FK_LOAD                 = $001118       ; load a binary file into memory, supports multiple file formats
=$000354				DOS_DST_PTR             = $000354      ; 4 bytes - Pointer for transferring data
=$000340				DOS_FD_PTR              = $000340      ; 4 bytes - A pointer to a file descriptor
=$000320				SDOS_VARIABLES          = $000320
.2008					START
.2008	20 fd 22	jsr $22fd	            JSR SETUP
.200b	c2 30		rep #$30	            REP #$30
.200d	08		php		            PHP
.200e	e2 20		sep #$20	            SEP #$20
.2010	48		pha		            PHA
.2011	a9 00		lda #$00	            LDA #`HELP_TEXT
.2013	48		pha		            PHA
.2014	ab		plb		            PLB
.2015	68		pla		            PLA
.2016	28		plp		            PLP
.2017	a2 40 23	ldx #$2340	                LDX #<>HELP_TEXT               ; Point to the message in an ASCIIZ string
.201a	22 1c 10 00	jsl $00101c	                JSL PUTS                 ; And ask the kernel to print it
.201e	20 73 20	jsr $2073	            JSR SETFILEDESC
.2021	c2 30		rep #$30	            REP #$30
.2023	a9 00 00	lda #$0000	                LDA #<>LOADBLOCK
.2026	8f 54 03 00	sta $000354	                STA @l DOS_DST_PTR
.202a	a9 01 00	lda #$0001	                LDA #`LOADBLOCK
.202d	8f 56 03 00	sta $000356	                STA @l DOS_DST_PTR+2        ; Set the destination address
.2031	22 18 11 00	jsl $001118	                JSL FK_LOAD                 ; Attempt to load the file
.2035	b0 15		bcs $204c	                BCS +                       ; If we got it: start tokenizing
.2037	c2 30		rep #$30	            REP #$30
.2039	08		php		            PHP
.203a	e2 20		sep #$20	            SEP #$20
.203c	48		pha		            PHA
.203d	a9 00		lda #$00	            LDA #`FILE_ERROR
.203f	48		pha		            PHA
.2040	ab		plb		            PLB
.2041	68		pla		            PLA
.2042	28		plp		            PLP
.2043	a2 26 23	ldx #$2326	                LDX #<>FILE_ERROR               ; Point to the message in an ASCIIZ string
.2046	22 1c 10 00	jsl $00101c	                JSL PUTS                 ; And ask the kernel to print it
.204a	80 26		bra $2072	                BRA ++
.204c					+
.204c	c2 30		rep #$30	            REP #$30
.204e	08		php		            PHP
.204f	e2 20		sep #$20	            SEP #$20
.2051	48		pha		            PHA
.2052	a9 00		lda #$00	            LDA #`FILE_LOAD
.2054	48		pha		            PHA
.2055	ab		plb		            PLB
.2056	68		pla		            PLA
.2057	28		plp		            PLP
.2058	a2 17 23	ldx #$2317	                LDX #<>FILE_LOAD               ; Point to the message in an ASCIIZ string
.205b	22 1c 10 00	jsl $00101c	                JSL PUTS                 ; And ask the kernel to print it
.205f	c2 30		rep #$30	            REP #$30
.2061	08		php		            PHP
.2062	e2 20		sep #$20	            SEP #$20
.2064	48		pha		            PHA
.2065	a9 01		lda #$01	            LDA #`LOADBLOCK
.2067	48		pha		            PHA
.2068	ab		plb		            PLB
.2069	68		pla		            PLA
.206a	28		plp		            PLP
.206b	a2 00 00	ldx #$0000	                LDX #<>LOADBLOCK               ; Point to the message in an ASCIIZ string
.206e	22 1c 10 00	jsl $00101c	                JSL PUTS                 ; And ask the kernel to print it
.2072					+
.2072	6b		rtl		            RTL
.2073	0b		phd		SETFILEDESC:    PHD
.2074	08		php		                PHP
.2075	08		php		            PHP
.2076	c2 20		rep #$20	            REP #$20
.2078	48		pha		            PHA
.2079	a9 20 03	lda #$0320	            LDA #SDOS_VARIABLES
.207c	5b		tcd		            TCD
.207d	68		pla		            PLA
.207e	28		plp		            PLP
.207f	c2 30		rep #$30	            REP #$30
.2081	a9 bb 22	lda #$22bb	                LDA #<>FD_IN            ; Point to the file descriptor
.2084	85 20		sta $0340	                STA DOS_FD_PTR
.2086	a9 00 00	lda #$0000	                LDA #`FD_IN
.2089	85 22		sta $0342	                STA DOS_FD_PTR+2
.208b	a0 00 00	ldy #$0000	                LDY #0                  ; Fille the file descriptor with 0
.208e	e2 20		sep #$20	            SEP #$20
.2090	a9 00		lda #$00	                LDA #0
.2092	97 20		sta [$0340],y	-               STA [DOS_FD_PTR],Y
.2094	c8		iny		                INY
.2095	c0 1e 00	cpy #$001e	                CPY #SIZE(FILEDESC)
.2098	d0 f8		bne $2092	                BNE -
.209a	c2 20		rep #$20	            REP #$20
.209c	a9 bb 20	lda #$20bb	                LDA #<>CLUSTER_BUFF     ; Point to the cluster buffer
.209f	8f c9 22 00	sta $0022c9	                STA @l FD_IN.BUFFER
.20a3	a9 00 00	lda #$0000	                LDA #`CLUSTER_BUFF
.20a6	8f cb 22 00	sta $0022cb	                STA @l FD_IN.BUFFER+2
.20aa	a9 37 23	lda #$2337	                LDA #<>FILE_NAME        ; Point the file desriptor to the path
.20ad	8f bd 22 00	sta $0022bd	                STA @l FD_IN.PATH
.20b1	a9 00 00	lda #$0000	                LDA #`FILE_NAME
.20b4	8f bf 22 00	sta $0022bf	                STA @l FD_IN.PATH+2
.20b8	28		plp		                PLP
.20b9	2b		pld		                PLD
.20ba	60		rts		            RTS
.0000					FILEDESC
>0000					STATUS              .byte ?             ; The status flags of the file descriptor (open, closed, error, EOF, etc.)
>0001					DEV                 .byte ?             ; The ID of the device holding the file
>0002					PATH                .dword ?            ; Pointer to a NULL terminated path string
>0006					CLUSTER             .dword ?            ; The current cluster of the file.
>000a					FIRST_CLUSTER       .dword ?            ; The ID of the first cluster in the file
>000e					BUFFER              .dword ?            ; Pointer to a cluster-sized buffer
>0012					FILESIZE            .dword ?            ; The size of the file
>0016					CREATE_DATE         .word ?             ; The creation date of the file
>0018					CREATE_TIME         .word ?             ; The creation time of the file
>001a					MODIFIED_DATE       .word ?             ; The modification date of the file
>001c					MODIFIED_TIME       .word ?             ; The modification time of the file
>20bb					CLUSTER_BUFF    .fill 512           ; A buffer for cluster read/write operations
.22bb					FD_IN
>22bb					STATUS              .byte ?             ; The status flags of the file descriptor (open, closed, error, EOF, etc.)
>22bc					DEV                 .byte ?             ; The ID of the device holding the file
>22bd					PATH                .dword ?            ; Pointer to a NULL terminated path string
>22c1					CLUSTER             .dword ?            ; The current cluster of the file.
>22c5					FIRST_CLUSTER       .dword ?            ; The ID of the first cluster in the file
>22c9					BUFFER              .dword ?            ; Pointer to a cluster-sized buffer
>22cd					FILESIZE            .dword ?            ; The size of the file
>22d1					CREATE_DATE         .word ?             ; The creation date of the file
>22d3					CREATE_TIME         .word ?             ; The creation time of the file
>22d5					MODIFIED_DATE       .word ?             ; The modification date of the file
>22d7					MODIFIED_TIME       .word ?             ; The modification time of the file

;******  Processing file: .\Fed\../Common/Common.asm

.22d9					RESET_SCREEN:
.22d9	e2 20		sep #$20	            SEP #$20
.22db	c2 10		rep #$10	            REP #$10
.22dd	a2 00 00	ldx #$0000	        LDX #0
.22e0	a9 20		lda #$20	-       LDA #' '
.22e2	9f 00 a0 af	sta $afa000,x	        STA @l SCREEN_TEXT_MEM, X
.22e6	a9 20		lda #$20	        LDA #TEXT_COLOR
.22e8	9f 00 c0 af	sta $afc000,x	        STA @l SCREEN_TEXT_COL, X
.22ec	e8		inx		        INX
.22ed	e0 c0 12	cpx #$12c0	        CPX #(NUM_COLS * NUM_ROWS)
.22f0	d0 ee		bne $22e0	        BNE -
.22f2	a2 00 00	ldx #$0000	        LDX #0
.22f5	a0 00 00	ldy #$0000	        LDY #0
.22f8	22 84 10 00	jsl $001084	        JSL LOCATE
.22fc	60		rts		            RTS
.22fd					SETUP:
.22fd	18		clc		        CLC                         ; Make sure we're native mode
.22fe	fb		xce		        XCE
.22ff	e2 20		sep #$20	            SEP #$20
.2301	c2 10		rep #$10	            REP #$10
.2303	a9 20		lda #$20	        LDA #TEXT_COLOR            ; Set the Text Color (Green Text on Black Background)
.2305	8f 1e 00 00	sta $00001e	        STA @lCUR_COLOR             ; @l forces 24 bit addressing mode...
.2309	a9 00		lda #$00	        LDA #$00                    ; Set to No Border
.230b	8f 04 00 af	sta $af0004	        STA @lBORDER_CTRL_REG
.230f	22 2c 11 00	jsl $00112c	        JSL FK_SETSIZES
.2313	20 d9 22	jsr $22d9	            JSR RESET_SCREEN
.2316	60		rts		            RTS

;******  Return to file: .\Fed\Fed.asm

>2317	46 69 6c 65 20 6c 6f 61		FILE_LOAD: .NULL "File loaded.", 13, 13
>231f	64 65 64 2e 0d 0d 00
>2326	46 69 6c 65 20 6c 6f 61		FILE_ERROR:.NULL "File load error", 13
>232e	64 20 65 72 72 6f 72 0d 00
>2337	74 65 73 74 2e 74 78 74		FILE_NAME:  .NULL "test.txt"
>233f	00
>2340	46 45 64 20 2d 20 43 32		HELP_TEXT:  .TEXT "FEd - C256 Foenix FMX Editor Help", 13
>2348	35 36 20 46 6f 65 6e 69 78 20 46 4d 58 20 45 64
>2358	69 74 6f 72 20 48 65 6c 70 0d
>2362	3d 3d 3d 3d 3d 3d 3d 3d		            .TEXT "============================================================================", 13
>236a	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d
;	...repeated 3 times (48 bytes)...
>23aa	3d 3d 3d 3d 0d
>23af	4c 73 2d 65 20 20 20 20		            .TEXT "Ls-e    List lines. If s and e are missing list entire file. If e is missing", 13
>23b7	4c 69 73 74 20 6c 69 6e 65 73 2e 20 49 66 20 73
>23c7	20 61 6e 64 20 65 20 61 72 65 20 6d 69 73 73 69
>23d7	6e 67 20 6c 69 73 74 20 65 6e 74 69 72 65 20 66
>23e7	69 6c 65 2e 20 49 66 20 65 20 69 73 20 6d 69 73
>23f7	73 69 6e 67 0d
>23fc	20 20 20 20 20 20 20 20		            .TEXT "        list from s to EOF. If s is missing list to e.", 13
>2404	6c 69 73 74 20 66 72 6f 6d 20 73 20 74 6f 20 45
>2414	4f 46 2e 20 49 66 20 73 20 69 73 20 6d 69 73 73
>2424	69 6e 67 20 6c 69 73 74 20 74 6f 20 65 2e 0d
>2433	45 73 20 20 20 20 20 20		            .TEXT "Es      Edit lines. If s is missing edit the 1st line.", 13
>243b	45 64 69 74 20 6c 69 6e 65 73 2e 20 49 66 20 73
>244b	20 69 73 20 6d 69 73 73 69 6e 67 20 65 64 69 74
>245b	20 74 68 65 20 31 73 74 20 6c 69 6e 65 2e 0d
>246a	49 73 20 20 20 20 20 20		            .TEXT "Is      Insert lines. If s is missing insert lines at EOL. If s is 0 or 1", 13
>2472	49 6e 73 65 72 74 20 6c 69 6e 65 73 2e 20 49 66
>2482	20 73 20 69 73 20 6d 69 73 73 69 6e 67 20 69 6e
>2492	73 65 72 74 20 6c 69 6e 65 73 20 61 74 20 45 4f
>24a2	4c 2e 20 49 66 20 73 20 69 73 20 30 20 6f 72 20
>24b2	31 0d
>24b4	20 20 20 20 20 20 20 20		            .TEXT "        insert lines at BOF.", 13
>24bc	69 6e 73 65 72 74 20 6c 69 6e 65 73 20 61 74 20
>24cc	42 4f 46 2e 0d
>24d1	44 73 2d 65 20 20 20 20		            .TEXT "Ds-e    Delete lines. If s and e are missing delete all lines. If e is missing", 13
>24d9	44 65 6c 65 74 65 20 6c 69 6e 65 73 2e 20 49 66
>24e9	20 73 20 61 6e 64 20 65 20 61 72 65 20 6d 69 73
>24f9	73 69 6e 67 20 64 65 6c 65 74 65 20 61 6c 6c 20
>2509	6c 69 6e 65 73 2e 20 49 66 20 65 20 69 73 20 6d
>2519	69 73 73 69 6e 67 0d
>2520	20 20 20 20 20 20 20 20		            .TEXT "        delete lines from s to EOF. If s is missing delete lines to e.", 13
>2528	64 65 6c 65 74 65 20 6c 69 6e 65 73 20 66 72 6f
>2538	6d 20 73 20 74 6f 20 45 4f 46 2e 20 49 66 20 73
>2548	20 69 73 20 6d 69 73 73 69 6e 67 20 64 65 6c 65
>2558	74 65 20 6c 69 6e 65 73 20 74 6f 20 65 2e 0d
>2567	0d				            .TEXT "", 13
>2568	57 20 20 20 20 20 20 20		            .TEXT "W       Write the file.", 13
>2570	57 72 69 74 65 20 74 68 65 20 66 69 6c 65 2e 0d
>2580	45 20 20 20 20 20 20 20		            .TEXT "E       Write the file and exit.", 13
>2588	57 72 69 74 65 20 74 68 65 20 66 69 6c 65 20 61
>2598	6e 64 20 65 78 69 74 2e 0d
>25a1	58 20 20 20 20 20 20 20		            .TEXT "X       eXit.", 13, 0
>25a9	65 58 69 74 2e 0d 00

;******  End of listing
