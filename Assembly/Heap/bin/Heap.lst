
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass.exe --long-address --flat -b --m65816 --intel-hex -oHeap\bin\Heap.hex --list=Heap\bin\Heap.lst --labels=Heap\bin\Heap.lbl .\Heap\Heap.asm
; Mon Feb 22 19:40:48 2021

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: .\Heap\Heap.asm

=true					IncludeUnitTests = true
=true					TraceEnabled = true
=$0f0000				HEAP_PAGE_START = $0F0000
=$0fffff				HEAP_PAGE_END   = $0FFFFF
=$20					TEXT_COLOR              = $20
=$a8					TraceMemoryStart        = $A8

;******  Processing file: .\Heap\../Common/Macros.asm


;******  Return to file: .\Heap\Heap.asm


;******  Processing file: .\Heap\../Common/Kernel.asm

=$00101c				PUTS                    = $00101C              ; Print a string to the currently selected channel
=$001018				PUTC                    = $001018
=$00106c				PRINTCR                 = $00106C
=$001080				PRINTAH                 = $001080
=$001078				PRINTH                  = $001078
=$001084				LOCATE                  = $001084
=$00001e				CUR_COLOR               = $00001E
=$af0004				BORDER_CTRL_REG	        = $AF0004
=$afa000				SCREEN_TEXT_MEM         = $AFA000
=$afc000				SCREEN_TEXT_COL         = $AFC000
=80					NUM_COLS                = 80
=60					NUM_ROWS                = 60
=$00104c				FK_GETCHW           = $00104c ; Get a character from the input channel. Waits until data received. A=0 and Carry=1 if no data is wating
=$001018				FK_PUTC             = $001018 ; Print a character to the currently selected channel
=$00101c				FK_PUTS             = $00101C ; Print a string to the currently selected channel
=$001084				FK_LOCATE           = $001084 ; Reposition the cursor to row Y column X
=$001078				FK_IPRINTH          = $001078 ; Print a HEX string
=$00103c				FK_SETOUT           = $00103c ; Select an output channel
=$00112c				FK_SETSIZES         = $00112C ; Set the text screen size variables based on the border and screen resolution.
=$0010f0				FK_OPEN             = $0010F0 ; open a file for reading/writing/creating
=$0010f4				FK_CREATE           = $0010F4 ; create a new file
=$0010f8				FK_CLOSE            = $0010F8 ; close a file (make sure last cluster is written)
=$0010fc				FK_WRITE            = $0010FC ; write the current cluster to the file
=$001100				FK_READ             = $001100 ; read the next cluster from the file
=$001104				FK_DELETE           = $001104 ; delete a file / directory
=$001108				FK_DIROPEN          = $001108 ; open a directory and seek the first directory entry
=$00110c				FK_DIRNEXT          = $00110C ; seek to the next directory of an open directory
=$001110				FK_DIRREAD          = $001110 ; Read the directory entry for the specified file
=$001114				FK_DIRWRITE         = $001114 ; Write any changes in the current directory cluster back to the drive
=$001118				FK_LOAD             = $001118 ; load a binary file into memory, supports multiple file formats
=$00111c				FK_SAVE             = $00111C ; Save memory to a binary file
=$001124				FK_RUN              = $001124 ; Load and run an executable binary file
=$001130				FK_COPY             = $001130 ; Copy a file
=$001120				FK_CMDBLOCK         = $001120 ; Send a command to a block device
=0					CHAN_CONSOLE = 0
=1					CHAN_COM1 = 1
=2					CHAN_COM2 = 2
=$000f89				KEYBOARD_LOCKS   = $000F89 ;  1 Byte, the status of the various lock keys
=$01					KB_SCROLL_LOCK      = $01
=$02					KB_NUM_LOCK         = $02
=$04					KB_CAPS_LOCK        = $04

;******  Return to file: .\Heap\Heap.asm

.0e0000					Main:
.0e0000	20 77 03	jsr $0e0377	            JSR SETUP
.0e0003	c2 30		rep #$30	            REP #$30
.0e0005	08		php		            PHP
.0e0006	e2 20		sep #$20	            SEP #$20
.0e0008	48		pha		            PHA
.0e0009	a9 0e		lda #$0e	            LDA #`Strings.Version
.0e000b	48		pha		            PHA
.0e000c	ab		plb		            PLB
.0e000d	68		pla		            PLA
.0e000e	28		plp		            PLP
.0e000f	a2 a9 05	ldx #$05a9	                LDX #<>Strings.Version               ; Point to the message in an ASCIIZ string
.0e0012	22 1c 10 00	jsl $00101c	                JSL PUTS                 ; And ask the kernel to print it
.0e0016	c2 30		rep #$30	            REP #$30
.0e0018	08		php		            PHP
.0e0019	e2 20		sep #$20	            SEP #$20
.0e001b	48		pha		            PHA
.0e001c	a9 0e		lda #$0e	            LDA #`Strings.Ready
.0e001e	48		pha		            PHA
.0e001f	ab		plb		            PLB
.0e0020	68		pla		            PLA
.0e0021	28		plp		            PLP
.0e0022	a2 ba 05	ldx #$05ba	                LDX #<>Strings.Ready               ; Point to the message in an ASCIIZ string
.0e0025	22 1c 10 00	jsl $00101c	                JSL PUTS                 ; And ask the kernel to print it
.0e0029	20 a8 00	jsr $0e00a8	            JSR HeapManager.UnitTests.Init
.0e002c	20 91 01	jsr $0e0191	            JSR HeapManager.UnitTests.ResetCurrentBlock
.0e002f	6b		rtl		    RTL

;******  Processing file: .\Heap\HeapManager.asm

.0e0030					HeapManager

;******  Processing file: .\Heap\HeapManager_Data.asm

.0e0030					ZeroPage
=$a0					    HeaderPointer       = $a0 ;.long ?
=$a3					    BlockPointer        = $a3 ;.long ?
=$a6					    RequestedSize       = $a6 ;.word ?
.0000					Header
>0000					    Start               .long ?
>0003					    End                 .long ?
>0006					    TotalSize           .word ?
>0008					    FirstBlock          .long ?
>000b					    CurrentBlock        .long ?
.0000					BlockHeader
>0000					    PrevBlock           .word ?
>0002					    NextBlock           .word ?
>0004					    RefCount            .word ?
>0006					    Size                .word ?

;******  Return to file: .\Heap\HeapManager.asm


;******  Processing file: .\Heap\HeapManager_Macros.asm


;******  Return to file: .\Heap\HeapManager.asm


;******  Processing file: .\Heap\HeapManager_Private.asm

.0e0030					Private

;******  Return to file: .\Heap\HeapManager.asm


;******  Processing file: .\Heap\HeapManager_UnitTests.asm

.0e0030					UnitTests
.0e0030					Strings
>0e0030	48 65 61 70 4d 61 6e 61		    Strings.Init:                .NULL "HeapManager.Init "
>0e0038	67 65 72 2e 49 6e 69 74 20 00
>0e0042	48 65 61 70 4d 61 6e 61		    Strings.ResetCurrentBlock:   .NULL "HeapManager.ResetCurrentBlock "
>0e004a	67 65 72 2e 52 65 73 65 74 43 75 72 72 65 6e 74
>0e005a	42 6c 6f 63 6b 20 00
>0e0061	48 65 61 70 4d 61 6e 61		    Strings.EmptyHeapMoves:      .NULL "HeapManager.EmptyHeapMoves "
>0e0069	67 65 72 2e 45 6d 70 74 79 48 65 61 70 4d 6f 76
>0e0079	65 73 20 00
>0e007d	50 61 73 73 65 64 0d 00		    Strings.Passed:              .NULL "Passed", 13
>0e0085	20 2d 20 46 61 69 6c 65		    Strings.Failed:              .NULL " - Failed", 13
>0e008d	64 0d 00
.0e0090					FailedUnitTest
.0e0090	22 80 10 00	jsl $001080	    JSL PRINTAH
.0e0094	c2 30		rep #$30	            REP #$30
.0e0096	08		php		            PHP
.0e0097	e2 20		sep #$20	            SEP #$20
.0e0099	48		pha		            PHA
.0e009a	a9 0e		lda #$0e	            LDA #`Strings.Failed
.0e009c	48		pha		            PHA
.0e009d	ab		plb		            PLB
.0e009e	68		pla		            PLA
.0e009f	28		plp		            PLP
.0e00a0	a2 85 00	ldx #$0085	                LDX #<>Strings.Failed               ; Point to the message in an ASCIIZ string
.0e00a3	22 1c 10 00	jsl $00101c	                JSL PUTS                 ; And ask the kernel to print it
.0e00a7	60		rts		            RTS
.0e00a8					Init
.0e00a8	20 a2 03	jsr $0e03a2	    JSR PrintTrace
.0e00ab	80 1f		bra $0e00cc	    BRA +
>0e00ad	20 20 20 48 65 61 70 4d		    .NULL "   ", "HeapManager.UnitTests.Init", 13
>0e00b5	61 6e 61 67 65 72 2e 55 6e 69 74 54 65 73 74 73
>0e00c5	2e 49 6e 69 74 0d 00
.0e00cc					+
.0e00cc	c2 20		rep #$20	            REP #$20
.0e00ce	a9 00 00	lda #$0000	    LDA #0
.0e00d1	e2 20		sep #$20	            SEP #$20
.0e00d3	c2 10		rep #$10	            REP #$10
.0e00d5	a9 0f		lda #$0f	    LDA #`HEAP_PAGE_START
.0e00d7	a2 00 00	ldx #$0000	    LDX #<>HEAP_PAGE_START
.0e00da	a0 ff ff	ldy #$ffff	    LDY #<>HEAP_PAGE_END
.0e00dd	20 d9 01	jsr $0e01d9	            JSR HeapManager.Init
.0e00e0	c2 30		rep #$30	            REP #$30
.0e00e2	08		php		            PHP
.0e00e3	e2 20		sep #$20	            SEP #$20
.0e00e5	48		pha		            PHA
.0e00e6	a9 0e		lda #$0e	            LDA #`Strings.Init
.0e00e8	48		pha		            PHA
.0e00e9	ab		plb		            PLB
.0e00ea	68		pla		            PLA
.0e00eb	28		plp		            PLP
.0e00ec	a2 30 00	ldx #$0030	                LDX #<>Strings.Init               ; Point to the message in an ASCIIZ string
.0e00ef	22 1c 10 00	jsl $00101c	                JSL PUTS                 ; And ask the kernel to print it
.0e00f3	e2 20		sep #$20	            SEP #$20
.0e00f5	a0 02 00	ldy #$0002	    LDY #HeapManager.Header.Start + 2
.0e00f8	b7 a0		lda [$a0],y	    LDA [ZeroPage.HeaderPointer], Y
.0e00fa	c9 0f		cmp #$0f	    CMP #`HEAP_PAGE_START
.0e00fc	f0 08		beq $0e0106	    BEQ +
.0e00fe	e2 20		sep #$20	            SEP #$20
.0e0100	a9 00		lda #$00	    LDA #0
.0e0102	20 90 00	jsr $0e0090	            JSR FailedUnitTest
.0e0105	60		rts		            RTS
.0e0106					+
.0e0106	c2 20		rep #$20	            REP #$20
.0e0108	a0 00 00	ldy #$0000	    LDY #HeapManager.Header.Start
.0e010b	b7 a0		lda [$a0],y	    LDA [ZeroPage.HeaderPointer], Y
.0e010d	c9 00 00	cmp #$0000	    CMP #<>HEAP_PAGE_START
.0e0110	f0 08		beq $0e011a	    BEQ +
.0e0112	e2 20		sep #$20	            SEP #$20
.0e0114	a9 01		lda #$01	    LDA #1
.0e0116	20 90 00	jsr $0e0090	            JSR FailedUnitTest
.0e0119	60		rts		            RTS
.0e011a					+
.0e011a	e2 20		sep #$20	            SEP #$20
.0e011c	a0 05 00	ldy #$0005	    LDY #HeapManager.Header.End + 2
.0e011f	b7 a0		lda [$a0],y	    LDA [ZeroPage.HeaderPointer], Y
.0e0121	c9 0f		cmp #$0f	    CMP #`HEAP_PAGE_END
.0e0123	f0 08		beq $0e012d	    BEQ +
.0e0125	e2 20		sep #$20	            SEP #$20
.0e0127	a9 02		lda #$02	    LDA #2
.0e0129	20 90 00	jsr $0e0090	            JSR FailedUnitTest
.0e012c	60		rts		            RTS
.0e012d					+
.0e012d	c2 20		rep #$20	            REP #$20
.0e012f	a0 03 00	ldy #$0003	    LDY #HeapManager.Header.End
.0e0132	b7 a0		lda [$a0],y	    LDA [ZeroPage.HeaderPointer], Y
.0e0134	c9 ff ff	cmp #$ffff	    CMP #<>HEAP_PAGE_END
.0e0137	f0 08		beq $0e0141	    BEQ +
.0e0139	e2 20		sep #$20	            SEP #$20
.0e013b	a9 03		lda #$03	    LDA #3
.0e013d	20 90 00	jsr $0e0090	            JSR FailedUnitTest
.0e0140	60		rts		            RTS
.0e0141					+
.0e0141	c2 20		rep #$20	            REP #$20
.0e0143	a0 06 00	ldy #$0006	    LDY #HeapManager.Header.TotalSize
.0e0146	b7 a0		lda [$a0],y	    LDA [ZeroPage.HeaderPointer], Y
.0e0148	c9 f1 ff	cmp #$fff1	    CMP #(<>HEAP_PAGE_END - <>HEAP_PAGE_START) - SIZE(HeapManager.Header)
.0e014b	f0 08		beq $0e0155	    BEQ +
.0e014d	e2 20		sep #$20	            SEP #$20
.0e014f	a9 04		lda #$04	    LDA #4
.0e0151	20 90 00	jsr $0e0090	            JSR FailedUnitTest
.0e0154	60		rts		            RTS
.0e0155					+
.0e0155	e2 20		sep #$20	            SEP #$20
.0e0157	a0 0a 00	ldy #$000a	    LDY #HeapManager.Header.FirstBlock + 2
.0e015a	b7 a0		lda [$a0],y	    LDA [ZeroPage.HeaderPointer], Y
.0e015c	c9 0f		cmp #$0f	    CMP #`HEAP_PAGE_START
.0e015e	f0 08		beq $0e0168	    BEQ +
.0e0160	e2 20		sep #$20	            SEP #$20
.0e0162	a9 05		lda #$05	    LDA #5
.0e0164	20 90 00	jsr $0e0090	            JSR FailedUnitTest
.0e0167	60		rts		            RTS
.0e0168					+
.0e0168	c2 20		rep #$20	            REP #$20
.0e016a	a0 08 00	ldy #$0008	    LDY #HeapManager.Header.FirstBlock
.0e016d	b7 a0		lda [$a0],y	    LDA [ZeroPage.HeaderPointer], Y
.0e016f	c9 0e 00	cmp #$000e	    CMP #(<>HEAP_PAGE_START + SIZE(HeapManager.Header))
.0e0172	f0 08		beq $0e017c	    BEQ +
.0e0174	e2 20		sep #$20	            SEP #$20
.0e0176	a9 06		lda #$06	    LDA #6
.0e0178	20 90 00	jsr $0e0090	            JSR FailedUnitTest
.0e017b	60		rts		            RTS
.0e017c					+
.0e017c	c2 30		rep #$30	            REP #$30
.0e017e	08		php		            PHP
.0e017f	e2 20		sep #$20	            SEP #$20
.0e0181	48		pha		            PHA
.0e0182	a9 0e		lda #$0e	            LDA #`Strings.Passed
.0e0184	48		pha		            PHA
.0e0185	ab		plb		            PLB
.0e0186	68		pla		            PLA
.0e0187	28		plp		            PLP
.0e0188	a2 7d 00	ldx #$007d	                LDX #<>Strings.Passed               ; Point to the message in an ASCIIZ string
.0e018b	22 1c 10 00	jsl $00101c	                JSL PUTS                 ; And ask the kernel to print it
.0e018f	60		rts		            RTS
.0e0190	60		rts		            RTS
.0e0191					ResetCurrentBlock
.0e0191	e2 20		sep #$20	            SEP #$20
.0e0193	c2 10		rep #$10	            REP #$10
.0e0195	a9 0f		lda #$0f	    LDA #`HEAP_PAGE_START
.0e0197	a2 00 00	ldx #$0000	    LDX #<>HEAP_PAGE_START
.0e019a	a0 ff ff	ldy #$ffff	    LDY #<>HEAP_PAGE_END
.0e019d	c2 30		rep #$30	            REP #$30
.0e019f	08		php		            PHP
.0e01a0	e2 20		sep #$20	            SEP #$20
.0e01a2	48		pha		            PHA
.0e01a3	a9 0e		lda #$0e	            LDA #`Strings.ResetCurrentBlock
.0e01a5	48		pha		            PHA
.0e01a6	ab		plb		            PLB
.0e01a7	68		pla		            PLA
.0e01a8	28		plp		            PLP
.0e01a9	a2 42 00	ldx #$0042	                LDX #<>Strings.ResetCurrentBlock               ; Point to the message in an ASCIIZ string
.0e01ac	22 1c 10 00	jsl $00101c	                JSL PUTS                 ; And ask the kernel to print it
.0e01b0	c2 30		rep #$30	            REP #$30
.0e01b2	08		php		            PHP
.0e01b3	e2 20		sep #$20	            SEP #$20
.0e01b5	48		pha		            PHA
.0e01b6	a9 0e		lda #$0e	            LDA #`Strings.Passed
.0e01b8	48		pha		            PHA
.0e01b9	ab		plb		            PLB
.0e01ba	68		pla		            PLA
.0e01bb	28		plp		            PLP
.0e01bc	a2 7d 00	ldx #$007d	                LDX #<>Strings.Passed               ; Point to the message in an ASCIIZ string
.0e01bf	22 1c 10 00	jsl $00101c	                JSL PUTS                 ; And ask the kernel to print it
.0e01c3	80 13		bra $0e01d8	    BRA +
.0e01c5					FAILED:
.0e01c5	c2 30		rep #$30	            REP #$30
.0e01c7	08		php		            PHP
.0e01c8	e2 20		sep #$20	            SEP #$20
.0e01ca	48		pha		            PHA
.0e01cb	a9 0e		lda #$0e	            LDA #`Strings.Failed
.0e01cd	48		pha		            PHA
.0e01ce	ab		plb		            PLB
.0e01cf	68		pla		            PLA
.0e01d0	28		plp		            PLP
.0e01d1	a2 85 00	ldx #$0085	                LDX #<>Strings.Failed               ; Point to the message in an ASCIIZ string
.0e01d4	22 1c 10 00	jsl $00101c	                JSL PUTS                 ; And ask the kernel to print it
.0e01d8					+
.0e01d8	60		rts		            RTS

;******  Return to file: .\Heap\HeapManager.asm

.0e01d9					Init
.0e01d9	20 5a 04	jsr $0e045a	    JSR PrintTraceAXY
.0e01dc	80 14		bra $0e01f2	    BRA +
>0e01de	20 20 20 48 65 61 70 4d		    .NULL "   ", "HeapManager.Init"
>0e01e6	61 6e 61 67 65 72 2e 49 6e 69 74 00
.0e01f2					+
.0e01f2	08		php		        PHP
.0e01f3	c2 30		rep #$30	            REP #$30
.0e01f5	48		pha		        PHA
.0e01f6	da		phx		        PHX
.0e01f7	5a		phy		        PHY
.0e01f8	8b		phb		        PHB
.0e01f9	0b		phd		        PHD
.0e01fa	5a		phy		    PHY
.0e01fb	20 16 03	jsr $0e0316	            JSR SetupZeroPage
.0e01fe	e2 20		sep #$20	            SEP #$20
.0e0200	85 a5		sta $a5		    STA ZeroPage.BlockPointer + 2 ; ZP_HEAP_MANAGER_BLOCK_POINTER + 2
.0e0202	c2 20		rep #$20	            REP #$20
.0e0204	8a		txa		    TXA
.0e0205	18		clc		    CLC
.0e0206	69 0e 00	adc #$000e	    ADC #SIZE(Header)
.0e0209	85 a3		sta $a3		    STA ZeroPage.BlockPointer
.0e020b	c2 20		rep #$20	            REP #$20
.0e020d	a5 a0		lda $a0		    LDA ZeroPage.HeaderPointer ; ZP_HEAP_MANAGER_HEADER_POINTER
.0e020f	a0 00 00	ldy #$0000	    LDY #Header.Start
.0e0212	97 a0		sta [$a0],y	    STA [ZeroPage.HeaderPointer], Y
.0e0214	e2 20		sep #$20	            SEP #$20
.0e0216	a5 a2		lda $a2		    LDA ZeroPage.HeaderPointer + 2
.0e0218	a0 02 00	ldy #$0002	    LDY #Header.Start + 2
.0e021b	97 a0		sta [$a0],y	    STA [ZeroPage.HeaderPointer], Y
.0e021d	c2 20		rep #$20	            REP #$20
.0e021f	68		pla		    PLA
.0e0220	a0 03 00	ldy #$0003	    LDY #Header.End
.0e0223	97 a0		sta [$a0],y	    STA [ZeroPage.HeaderPointer], Y
.0e0225	e2 20		sep #$20	            SEP #$20
.0e0227	a5 a2		lda $a2		    LDA ZeroPage.HeaderPointer + 2
.0e0229	a0 05 00	ldy #$0005	    LDY #Header.End + 2
.0e022c	97 a0		sta [$a0],y	    STA [ZeroPage.HeaderPointer], Y
.0e022e	c2 20		rep #$20	            REP #$20
.0e0230	a0 03 00	ldy #$0003	    LDY #Header.End
.0e0233	b7 a0		lda [$a0],y	    LDA [ZeroPage.HeaderPointer], Y
.0e0235	38		sec		    SEC
.0e0236	e5 a0		sbc $a0		    SBC ZeroPage.HeaderPointer
.0e0238	38		sec		    SEC
.0e0239	e9 0e 00	sbc #$000e	    SBC #SIZE(Header)
.0e023c	a0 06 00	ldy #$0006	    LDY #Header.TotalSize
.0e023f	97 a0		sta [$a0],y	    STA [ZeroPage.HeaderPointer], Y
.0e0241	e2 20		sep #$20	            SEP #$20
.0e0243	a5 a5		lda $a5		    LDA ZeroPage.BlockPointer + 2
.0e0245	a0 0a 00	ldy #$000a	    LDY #Header.FirstBlock + 2
.0e0248	97 a0		sta [$a0],y	    STA [ZeroPage.HeaderPointer], Y
.0e024a	c2 20		rep #$20	            REP #$20
.0e024c	a5 a3		lda $a3		    LDA ZeroPage.BlockPointer
.0e024e	a0 08 00	ldy #$0008	    LDY #Header.FirstBlock
.0e0251	97 a0		sta [$a0],y	    STA [ZeroPage.HeaderPointer], Y
.0e0253	a9 00 00	lda #$0000	    LDA #0
.0e0256	a0 00 00	ldy #$0000	    LDY #BlockHeader.PrevBlock
.0e0259	97 a3		sta [$a3],y	    STA [ZeroPage.BlockPointer], Y
.0e025b	a0 02 00	ldy #$0002	    LDY #BlockHeader.NextBlock
.0e025e	97 a3		sta [$a3],y	    STA [ZeroPage.BlockPointer], Y
.0e0260	a0 04 00	ldy #$0004	    LDY #BlockHeader.RefCount
.0e0263	97 a3		sta [$a3],y	    STA [ZeroPage.BlockPointer], Y
.0e0265	a0 06 00	ldy #$0006	    LDY #Header.TotalSize
.0e0268	b7 a0		lda [$a0],y	    LDA [ZeroPage.HeaderPointer], Y
.0e026a	38		sec		    SEC
.0e026b	e9 08 00	sbc #$0008	    SBC #SIZE(BlockHeader)
.0e026e	a0 06 00	ldy #$0006	    LDY #BlockHeader.Size
.0e0271	97 a3		sta [$a3],y	    STA [ZeroPage.BlockPointer], Y
.0e0273	20 a2 03	jsr $0e03a2	    JSR PrintTrace
.0e0276	80 18		bra $0e0290	    BRA +
>0e0278	20 20 20 48 65 61 70 4d		    .NULL "   ", "HeapManager.ZeroPage"
>0e0280	61 6e 61 67 65 72 2e 5a 65 72 6f 50 61 67 65 00
.0e0290					+
.0e0290	20 11 05	jsr $0e0511	    JSR PrintMemory
.0e0293	80 05		bra $0e029a	    BRA +
>0e0295	a0 08 00			    .LONG $0008A0
>0e0298	06 00				    .WORD 6
.0e029a					+
.0e029a	08		php		    PHP
.0e029b	48		pha		    PHA
.0e029c	e2 20		sep #$20	            SEP #$20
.0e029e	a5 a2		lda $a2		    LDA HeapManager.ZeroPage.HeaderPointer + 2
.0e02a0	8d d0 02	sta $0e02d0	    STA Address + 2
.0e02a3	c2 20		rep #$20	            REP #$20
.0e02a5	a5 a0		lda $a0		    LDA HeapManager.ZeroPage.HeaderPointer
.0e02a7	8d ce 02	sta $0e02ce	    STA Address
.0e02aa	68		pla		    PLA
.0e02ab	28		plp		    PLP
.0e02ac	20 a2 03	jsr $0e03a2	    JSR PrintTrace
.0e02af	80 18		bra $0e02c9	    BRA +
>0e02b1	20 20 20 48 65 61 70 4d		    .NULL "   ", "HeapManager.Header  "
>0e02b9	61 6e 61 67 65 72 2e 48 65 61 64 65 72 20 20 00
.0e02c9					+
.0e02c9	20 11 05	jsr $0e0511	    JSR PrintMemory
.0e02cc	80 05		bra $0e02d3	    BRA +
.0e02ce					Address
>0e02ce	00 00 00			    .LONG 0
>0e02d1	0e 00				    .WORD SIZE(HeapManager.Header)
.0e02d3					+
.0e02d3	08		php		    PHP
.0e02d4	48		pha		    PHA
.0e02d5	e2 20		sep #$20	            SEP #$20
.0e02d7	a5 a5		lda $a5		    LDA HeapManager.ZeroPage.BlockPointer + 2
.0e02d9	8d 09 03	sta $0e0309	    STA Address + 2
.0e02dc	c2 20		rep #$20	            REP #$20
.0e02de	a5 a3		lda $a3		    LDA HeapManager.ZeroPage.BlockPointer
.0e02e0	8d 07 03	sta $0e0307	    STA Address
.0e02e3	68		pla		    PLA
.0e02e4	28		plp		    PLP
.0e02e5	20 a2 03	jsr $0e03a2	    JSR PrintTrace
.0e02e8	80 18		bra $0e0302	    BRA +
>0e02ea	20 20 20 48 65 61 70 4d		    .NULL "   ", "HeapManager.Block   "
>0e02f2	61 6e 61 67 65 72 2e 42 6c 6f 63 6b 20 20 20 00
.0e0302					+
.0e0302	20 11 05	jsr $0e0511	    JSR PrintMemory
.0e0305	80 05		bra $0e030c	    BRA +
.0e0307					Address
>0e0307	00 00 00			    .LONG 0
>0e030a	08 00				    .WORD SIZE(HeapManager.BlockHeader)
.0e030c					+
.0e030c	c2 30		rep #$30	            REP #$30
.0e030e	2b		pld		        PLD
.0e030f	ab		plb		        PLB
.0e0310	7a		ply		        PLY
.0e0311	fa		plx		        PLX
.0e0312	68		pla		        PLA
.0e0313	28		plp		        PLP
.0e0314	60		rts		        RTS
.0e0315	60		rts		            RTS
.0e0316					SetupZeroPage
.0e0316	20 cd 03	jsr $0e03cd	    JSR PrintTraceAX
.0e0319	80 1d		bra $0e0338	    BRA +
>0e031b	20 20 20 48 65 61 70 4d		    .NULL "   ", "HeapManager.SetupZeroPage"
>0e0323	61 6e 61 67 65 72 2e 53 65 74 75 70 5a 65 72 6f
>0e0333	50 61 67 65 00
.0e0338					+
.0e0338	08		php		        PHP
.0e0339	c2 30		rep #$30	            REP #$30
.0e033b	48		pha		        PHA
.0e033c	da		phx		        PHX
.0e033d	5a		phy		        PHY
.0e033e	8b		phb		        PHB
.0e033f	0b		phd		        PHD
.0e0340	e2 20		sep #$20	            SEP #$20
.0e0342	85 a2		sta $a2		    STA ZeroPage.HeaderPointer + 2
.0e0344	c2 20		rep #$20	            REP #$20
.0e0346	8a		txa		    TXA
.0e0347	85 a0		sta $a0		    STA ZeroPage.HeaderPointer
.0e0349	c2 30		rep #$30	            REP #$30
.0e034b	2b		pld		        PLD
.0e034c	ab		plb		        PLB
.0e034d	7a		ply		        PLY
.0e034e	fa		plx		        PLX
.0e034f	68		pla		        PLA
.0e0350	28		plp		        PLP
.0e0351	60		rts		        RTS
.0e0352	60		rts		            RTS

;******  Return to file: .\Heap\Heap.asm


;******  Processing file: .\Heap\../Common/Common.asm

.0e0353					RESET_SCREEN
.0e0353	e2 20		sep #$20	            SEP #$20
.0e0355	c2 10		rep #$10	            REP #$10
.0e0357	a2 00 00	ldx #$0000	        LDX #0
.0e035a	a9 20		lda #$20	-       LDA #' '
.0e035c	9f 00 a0 af	sta $afa000,x	        STA @l SCREEN_TEXT_MEM, X
.0e0360	a9 20		lda #$20	        LDA #TEXT_COLOR
.0e0362	9f 00 c0 af	sta $afc000,x	        STA @l SCREEN_TEXT_COL, X
.0e0366	e8		inx		        INX
.0e0367	e0 c0 12	cpx #$12c0	        CPX #(NUM_COLS * NUM_ROWS)
.0e036a	d0 ee		bne $0e035a	        BNE -
.0e036c	a2 00 00	ldx #$0000	        LDX #0
.0e036f	a0 00 00	ldy #$0000	        LDY #0
.0e0372	22 84 10 00	jsl $001084	        JSL LOCATE
.0e0376	60		rts		            RTS
.0e0377					SETUP
.0e0377	08		php		        PHP
.0e0378	c2 30		rep #$30	            REP #$30
.0e037a	48		pha		        PHA
.0e037b	da		phx		        PHX
.0e037c	5a		phy		        PHY
.0e037d	8b		phb		        PHB
.0e037e	0b		phd		        PHD
.0e037f	18		clc		        CLC                         ; Make sure we're native mode
.0e0380	fb		xce		        XCE
.0e0381	e2 20		sep #$20	            SEP #$20
.0e0383	c2 10		rep #$10	            REP #$10
.0e0385	a9 20		lda #$20	        LDA #TEXT_COLOR            ; Set the Text Color (Green Text on Black Background)
.0e0387	8f 1e 00 00	sta $00001e	        STA @lCUR_COLOR             ; @l forces 24 bit addressing mode...
.0e038b	a9 00		lda #$00	        LDA #$00                    ; Set to No Border
.0e038d	8f 04 00 af	sta $af0004	        STA @lBORDER_CTRL_REG
.0e0391	22 2c 11 00	jsl $00112c	        JSL FK_SETSIZES
.0e0395	20 53 03	jsr $0e0353	            JSR RESET_SCREEN
.0e0398	c2 30		rep #$30	            REP #$30
.0e039a	2b		pld		        PLD
.0e039b	ab		plb		        PLB
.0e039c	7a		ply		        PLY
.0e039d	fa		plx		        PLX
.0e039e	68		pla		        PLA
.0e039f	28		plp		        PLP
.0e03a0	60		rts		        RTS
.0e03a1	60		rts		            RTS
.0e03a2					PrintTrace
.0e03a2	08		php		        PHP
.0e03a3	c2 30		rep #$30	            REP #$30
.0e03a5	48		pha		        PHA
.0e03a6	da		phx		        PHX
.0e03a7	5a		phy		        PHY
.0e03a8	8b		phb		        PHB
.0e03a9	0b		phd		        PHD
.0e03aa	c2 30		rep #$30	            REP #$30
.0e03ac	a3 0b		lda $0b,s	        LDA 11,S        ; Get the return address
.0e03ae					calc_addr
.0e03ae	18		clc		        CLC
.0e03af	69 03 00	adc #$0003	        ADC #3          ; Add 3 to skip over the following branch
.0e03b2	aa		tax		        TAX
.0e03b3	e2 20		sep #$20	            SEP #$20
.0e03b5	a9 0e		lda #$0e	        LDA #`PrintTrace
.0e03b7	48		pha		        PHA
.0e03b8	ab		plb		        PLB
.0e03b9					pr_loop
.0e03b9	bd 00 00	lda $0e0000,x	        LDA #0,B,X
.0e03bc	f0 06		beq $0e03c4	        BEQ done
.0e03be	20 8e 05	jsr $0e058e	            JSR ScreenPutChar
.0e03c1	e8		inx		        INX
.0e03c2	80 f5		bra $0e03b9	        BRA pr_loop
.0e03c4					done
.0e03c4	c2 30		rep #$30	            REP #$30
.0e03c6	2b		pld		        PLD
.0e03c7	ab		plb		        PLB
.0e03c8	7a		ply		        PLY
.0e03c9	fa		plx		        PLX
.0e03ca	68		pla		        PLA
.0e03cb	28		plp		        PLP
.0e03cc	60		rts		        RTS
.0e03cd					PrintTraceAX
.0e03cd	08		php		        PHP
.0e03ce	c2 30		rep #$30	            REP #$30
.0e03d0	48		pha		        PHA
.0e03d1	da		phx		        PHX
.0e03d2	5a		phy		        PHY
.0e03d3	8b		phb		        PHB
.0e03d4	0b		phd		        PHD
.0e03d5	da		phx		        PHX
.0e03d6	48		pha		        PHA
.0e03d7	c2 30		rep #$30	            REP #$30
.0e03d9	a3 0f		lda $0f,s	        LDA 15,S        ; Get the return address
.0e03db					calc_addr
.0e03db	18		clc		        CLC
.0e03dc	69 03 00	adc #$0003	        ADC #3          ; Add 3 to skip over the following branch
.0e03df	aa		tax		        TAX
.0e03e0	e2 20		sep #$20	            SEP #$20
.0e03e2	a9 0e		lda #$0e	        LDA #`PrintTraceAX
.0e03e4	48		pha		        PHA
.0e03e5	ab		plb		        PLB
.0e03e6					pr_loop
.0e03e6	bd 00 00	lda $0e0000,x	        LDA #0,B,X
.0e03e9	f0 06		beq $0e03f1	        BEQ done
.0e03eb	20 8e 05	jsr $0e058e	            JSR ScreenPutChar
.0e03ee	e8		inx		        INX
.0e03ef	80 f5		bra $0e03e6	        BRA pr_loop
.0e03f1					done
.0e03f1	e2 20		sep #$20	            SEP #$20
.0e03f3	a9 28		lda #$28	        LDA #'('
.0e03f5	20 8e 05	jsr $0e058e	            JSR ScreenPutChar
.0e03f8	e2 20		sep #$20	            SEP #$20
.0e03fa	a9 41		lda #$41	        LDA #'A'
.0e03fc	20 8e 05	jsr $0e058e	            JSR ScreenPutChar
.0e03ff	e2 20		sep #$20	            SEP #$20
.0e0401	a9 3d		lda #$3d	        LDA #'='
.0e0403	20 8e 05	jsr $0e058e	            JSR ScreenPutChar
.0e0406	c2 20		rep #$20	            REP #$20
.0e0408	68		pla		        PLA
.0e0409	48		pha		        PHA
.0e040a	e2 20		sep #$20	            SEP #$20
.0e040c	eb		xba		        XBA
.0e040d	22 80 10 00	jsl $001080	        JSL PRINTAH
.0e0411	c2 20		rep #$20	            REP #$20
.0e0413	68		pla		        PLA
.0e0414	e2 20		sep #$20	            SEP #$20
.0e0416	22 80 10 00	jsl $001080	        JSL PRINTAH
.0e041a	e2 20		sep #$20	            SEP #$20
.0e041c	a9 2c		lda #$2c	        LDA #','
.0e041e	20 8e 05	jsr $0e058e	            JSR ScreenPutChar
.0e0421	e2 20		sep #$20	            SEP #$20
.0e0423	a9 58		lda #$58	        LDA #'X'
.0e0425	20 8e 05	jsr $0e058e	            JSR ScreenPutChar
.0e0428	e2 20		sep #$20	            SEP #$20
.0e042a	a9 3d		lda #$3d	        LDA #'='
.0e042c	20 8e 05	jsr $0e058e	            JSR ScreenPutChar
.0e042f	c2 20		rep #$20	            REP #$20
.0e0431	68		pla		        PLA
.0e0432	48		pha		        PHA
.0e0433	e2 20		sep #$20	            SEP #$20
.0e0435	eb		xba		        XBA
.0e0436	22 80 10 00	jsl $001080	        JSL PRINTAH
.0e043a	c2 20		rep #$20	            REP #$20
.0e043c	68		pla		        PLA
.0e043d	e2 20		sep #$20	            SEP #$20
.0e043f	22 80 10 00	jsl $001080	        JSL PRINTAH
.0e0443	e2 20		sep #$20	            SEP #$20
.0e0445	a9 29		lda #$29	        LDA #')'
.0e0447	20 8e 05	jsr $0e058e	            JSR ScreenPutChar
.0e044a	e2 20		sep #$20	            SEP #$20
.0e044c	a9 0d		lda #$0d	        LDA #13
.0e044e	20 8e 05	jsr $0e058e	            JSR ScreenPutChar
.0e0451	c2 30		rep #$30	            REP #$30
.0e0453	2b		pld		        PLD
.0e0454	ab		plb		        PLB
.0e0455	7a		ply		        PLY
.0e0456	fa		plx		        PLX
.0e0457	68		pla		        PLA
.0e0458	28		plp		        PLP
.0e0459	60		rts		        RTS
.0e045a					PrintTraceAXY
.0e045a	08		php		        PHP
.0e045b	c2 30		rep #$30	            REP #$30
.0e045d	48		pha		        PHA
.0e045e	da		phx		        PHX
.0e045f	5a		phy		        PHY
.0e0460	8b		phb		        PHB
.0e0461	0b		phd		        PHD
.0e0462	5a		phy		        PHY
.0e0463	da		phx		        PHX
.0e0464	48		pha		        PHA
.0e0465	c2 30		rep #$30	            REP #$30
.0e0467	a3 11		lda $11,s	        LDA 17,S        ; Get the return address
.0e0469					calc_addr
.0e0469	18		clc		        CLC
.0e046a	69 03 00	adc #$0003	        ADC #3          ; Add 3 to skip over the following branch
.0e046d	aa		tax		        TAX
.0e046e	e2 20		sep #$20	            SEP #$20
.0e0470	a9 0e		lda #$0e	        LDA #`PrintTraceAXY
.0e0472	48		pha		        PHA
.0e0473	ab		plb		        PLB
.0e0474					pr_loop
.0e0474	bd 00 00	lda $0e0000,x	        LDA #0,B,X
.0e0477	f0 06		beq $0e047f	        BEQ done
.0e0479	20 8e 05	jsr $0e058e	            JSR ScreenPutChar
.0e047c	e8		inx		        INX
.0e047d	80 f5		bra $0e0474	        BRA pr_loop
.0e047f					done
.0e047f	e2 20		sep #$20	            SEP #$20
.0e0481	a9 28		lda #$28	        LDA #'('
.0e0483	20 8e 05	jsr $0e058e	            JSR ScreenPutChar
.0e0486	e2 20		sep #$20	            SEP #$20
.0e0488	a9 41		lda #$41	        LDA #'A'
.0e048a	20 8e 05	jsr $0e058e	            JSR ScreenPutChar
.0e048d	e2 20		sep #$20	            SEP #$20
.0e048f	a9 3d		lda #$3d	        LDA #'='
.0e0491	20 8e 05	jsr $0e058e	            JSR ScreenPutChar
.0e0494	c2 20		rep #$20	            REP #$20
.0e0496	68		pla		        PLA
.0e0497	48		pha		        PHA
.0e0498	e2 20		sep #$20	            SEP #$20
.0e049a	eb		xba		        XBA
.0e049b	22 80 10 00	jsl $001080	        JSL PRINTAH
.0e049f	c2 20		rep #$20	            REP #$20
.0e04a1	68		pla		        PLA
.0e04a2	e2 20		sep #$20	            SEP #$20
.0e04a4	22 80 10 00	jsl $001080	        JSL PRINTAH
.0e04a8	e2 20		sep #$20	            SEP #$20
.0e04aa	a9 2c		lda #$2c	        LDA #','
.0e04ac	20 8e 05	jsr $0e058e	            JSR ScreenPutChar
.0e04af	e2 20		sep #$20	            SEP #$20
.0e04b1	a9 58		lda #$58	        LDA #'X'
.0e04b3	20 8e 05	jsr $0e058e	            JSR ScreenPutChar
.0e04b6	e2 20		sep #$20	            SEP #$20
.0e04b8	a9 3d		lda #$3d	        LDA #'='
.0e04ba	20 8e 05	jsr $0e058e	            JSR ScreenPutChar
.0e04bd	c2 20		rep #$20	            REP #$20
.0e04bf	68		pla		        PLA
.0e04c0	48		pha		        PHA
.0e04c1	e2 20		sep #$20	            SEP #$20
.0e04c3	eb		xba		        XBA
.0e04c4	22 80 10 00	jsl $001080	        JSL PRINTAH
.0e04c8	c2 20		rep #$20	            REP #$20
.0e04ca	68		pla		        PLA
.0e04cb	e2 20		sep #$20	            SEP #$20
.0e04cd	22 80 10 00	jsl $001080	        JSL PRINTAH
.0e04d1	e2 20		sep #$20	            SEP #$20
.0e04d3	a9 2c		lda #$2c	        LDA #','
.0e04d5	20 8e 05	jsr $0e058e	            JSR ScreenPutChar
.0e04d8	e2 20		sep #$20	            SEP #$20
.0e04da	a9 59		lda #$59	        LDA #'Y'
.0e04dc	20 8e 05	jsr $0e058e	            JSR ScreenPutChar
.0e04df	e2 20		sep #$20	            SEP #$20
.0e04e1	a9 3d		lda #$3d	        LDA #'='
.0e04e3	20 8e 05	jsr $0e058e	            JSR ScreenPutChar
.0e04e6	c2 20		rep #$20	            REP #$20
.0e04e8	68		pla		        PLA
.0e04e9	48		pha		        PHA
.0e04ea	e2 20		sep #$20	            SEP #$20
.0e04ec	eb		xba		        XBA
.0e04ed	22 80 10 00	jsl $001080	        JSL PRINTAH
.0e04f1	c2 20		rep #$20	            REP #$20
.0e04f3	68		pla		        PLA
.0e04f4	e2 20		sep #$20	            SEP #$20
.0e04f6	22 80 10 00	jsl $001080	        JSL PRINTAH
.0e04fa	e2 20		sep #$20	            SEP #$20
.0e04fc	a9 29		lda #$29	        LDA #')'
.0e04fe	20 8e 05	jsr $0e058e	            JSR ScreenPutChar
.0e0501	e2 20		sep #$20	            SEP #$20
.0e0503	a9 0d		lda #$0d	        LDA #13
.0e0505	20 8e 05	jsr $0e058e	            JSR ScreenPutChar
.0e0508	c2 30		rep #$30	            REP #$30
.0e050a	2b		pld		        PLD
.0e050b	ab		plb		        PLB
.0e050c	7a		ply		        PLY
.0e050d	fa		plx		        PLX
.0e050e	68		pla		        PLA
.0e050f	28		plp		        PLP
.0e0510	60		rts		        RTS
.0e0511					PrintMemory
.0e0511	08		php		        PHP
.0e0512	c2 30		rep #$30	            REP #$30
.0e0514	48		pha		        PHA
.0e0515	da		phx		        PHX
.0e0516	5a		phy		        PHY
.0e0517	8b		phb		        PHB
.0e0518	0b		phd		        PHD
.0e0519	c2 30		rep #$30	            REP #$30
.0e051b	a3 0b		lda $0b,s	        LDA 11,S        ; Get the return address
.0e051d					calc_addr
.0e051d	18		clc		        CLC
.0e051e	69 03 00	adc #$0003	        ADC #3          ; Add 3 to skip over the following branch
.0e0521	aa		tax		        TAX
.0e0522	e2 20		sep #$20	            SEP #$20
.0e0524	a9 0e		lda #$0e	        LDA #`PrintMemory
.0e0526	48		pha		        PHA
.0e0527	ab		plb		        PLB
.0e0528	e2 20		sep #$20	            SEP #$20
.0e052a	e8		inx		        INX
.0e052b	e8		inx		        INX
.0e052c	bd 00 00	lda $0e0000,x	        LDA #0,B,X
.0e052f	85 aa		sta $aa		        STA TraceMemoryStart + 2
.0e0531	ca		dex		        DEX
.0e0532	ca		dex		        DEX
.0e0533	c2 20		rep #$20	            REP #$20
.0e0535	bd 00 00	lda $0e0000,x	        LDA #0,B,X
.0e0538	85 a8		sta $a8		        STA TraceMemoryStart
.0e053a	e8		inx		        INX
.0e053b	e8		inx		        INX
.0e053c	e8		inx		        INX
.0e053d	bd 00 00	lda $0e0000,x	        LDA #0,B,X
.0e0540	aa		tax		        TAX
.0e0541	a0 00 00	ldy #$0000	        LDY #0
.0e0544	e2 20		sep #$20	            SEP #$20
.0e0546	a9 20		lda #$20	        LDA #' '
.0e0548	20 8e 05	jsr $0e058e	            JSR ScreenPutChar
.0e054b	a5 aa		lda $aa		        LDA TraceMemoryStart + 2
.0e054d	22 80 10 00	jsl $001080	        JSL PRINTAH
.0e0551	e2 20		sep #$20	            SEP #$20
.0e0553	a9 3a		lda #$3a	        LDA #':'
.0e0555	20 8e 05	jsr $0e058e	            JSR ScreenPutChar
.0e0558	a5 a9		lda $a9		        LDA TraceMemoryStart + 1
.0e055a	22 80 10 00	jsl $001080	        JSL PRINTAH
.0e055e	a5 a8		lda $a8		        LDA TraceMemoryStart
.0e0560	22 80 10 00	jsl $001080	        JSL PRINTAH
.0e0564	e2 20		sep #$20	            SEP #$20
.0e0566	a9 20		lda #$20	        LDA #' '
.0e0568	20 8e 05	jsr $0e058e	            JSR ScreenPutChar
.0e056b					loop
.0e056b	b7 a8		lda [$a8],y	        LDA [TraceMemoryStart], Y
.0e056d	22 80 10 00	jsl $001080	        JSL PRINTAH
.0e0571	ca		dex		        DEX
.0e0572	f0 0a		beq $0e057e	        BEQ +
.0e0574	c8		iny		        INY
.0e0575	e2 20		sep #$20	            SEP #$20
.0e0577	a9 20		lda #$20	        LDA #' '
.0e0579	20 8e 05	jsr $0e058e	            JSR ScreenPutChar
.0e057c	80 ed		bra $0e056b	        BRA loop
.0e057e					+
.0e057e	e2 20		sep #$20	            SEP #$20
.0e0580	a9 0d		lda #$0d	        LDA #13
.0e0582	20 8e 05	jsr $0e058e	            JSR ScreenPutChar
.0e0585	c2 30		rep #$30	            REP #$30
.0e0587	2b		pld		        PLD
.0e0588	ab		plb		        PLB
.0e0589	7a		ply		        PLY
.0e058a	fa		plx		        PLX
.0e058b	68		pla		        PLA
.0e058c	28		plp		        PLP
.0e058d	60		rts		        RTS
.0e058e					ScreenPutChar
.0e058e	08		php		        PHP
.0e058f	e2 20		sep #$20	            SEP #$20
.0e0591	48		pha		        PHA
.0e0592	48		pha		        PHA
.0e0593	a9 00		lda #$00	        LDA #CHAN_CONSOLE       ; Switch to the console device
.0e0595	22 3c 10 00	jsl $00103c	        JSL FK_SETOUT
.0e0599	68		pla		        PLA
.0e059a	22 18 10 00	jsl $001018	        JSL FK_PUTC
.0e059e					loop
.0e059e	af 89 0f 00	lda $000f89	        LDA @lKEYBOARD_LOCKS    ; Check the status of the lock keys
.0e05a2	29 01		and #$01	        AND #KB_SCROLL_LOCK     ; Is Scroll Lock pressed?
.0e05a4	d0 f8		bne $0e059e	        BNE loop                ; Yes: wait until it's released
.0e05a6	68		pla		        PLA
.0e05a7	28		plp		        PLP
.0e05a8	60		rts		            RTS

;******  Return to file: .\Heap\Heap.asm

.0e05a9					Strings

;******  Processing file: .\Heap\Version.asm

>0e05a9	32 30 32 31 30 32 32 32		Version .NULL "20210222-074048", 13
>0e05b1	2d 30 37 34 30 34 38 0d 00

;******  Return to file: .\Heap\Heap.asm

>0e05ba	48 65 61 70 4d 61 6e 61		    Ready:                        .NULL "HeapManager.UnitTests Ready", 13, 13
>0e05c2	67 65 72 2e 55 6e 69 74 54 65 73 74 73 20 52 65
>0e05d2	61 64 79 0d 0d 00
>0e05d8					MY_HEAP_MANAGER .long ?

;******  End of listing
