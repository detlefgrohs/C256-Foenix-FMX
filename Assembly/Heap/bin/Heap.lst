
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass.exe --long-address --flat -b --m65816 --intel-hex -oHeap\bin\Heap.hex --list=Heap\bin\Heap.lst --labels=Heap\bin\Heap.lbl .\Heap\Heap.asm
; Mon Feb 22 15:19:20 2021

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: .\Heap\Heap.asm

=true					IncludeUnitTests = true
=true					TraceEnabled = true
=$0f0000				HEAP_PAGE_START = $0F0000
=$0fffff				HEAP_PAGE_END   = $0FFFFF
=$20					TEXT_COLOR              = $20
=$a8					TraceMemoryStart        = $A8

;******  Processing file: .\Heap\../Common/Macros.asm


;******  Return to file: .\Heap\Heap.asm


;******  Processing file: .\Heap\../Common/Kernel.asm

=$00101c				PUTS                    = $00101C              ; Print a string to the currently selected channel
=$001018				PUTC                    = $001018
=$00106c				PRINTCR                 = $00106C
=$001080				PRINTAH                 = $001080
=$001078				PRINTH                  = $001078
=$001084				LOCATE                  = $001084
=$00001e				CUR_COLOR               = $00001E
=$af0004				BORDER_CTRL_REG	        = $AF0004
=$afa000				SCREEN_TEXT_MEM         = $AFA000
=$afc000				SCREEN_TEXT_COL         = $AFC000
=80					NUM_COLS                = 80
=60					NUM_ROWS                = 60
=$00104c				FK_GETCHW           = $00104c ; Get a character from the input channel. Waits until data received. A=0 and Carry=1 if no data is wating
=$001018				FK_PUTC             = $001018 ; Print a character to the currently selected channel
=$00101c				FK_PUTS             = $00101C ; Print a string to the currently selected channel
=$001084				FK_LOCATE           = $001084 ; Reposition the cursor to row Y column X
=$001078				FK_IPRINTH          = $001078 ; Print a HEX string
=$00103c				FK_SETOUT           = $00103c ; Select an output channel
=$00112c				FK_SETSIZES         = $00112C ; Set the text screen size variables based on the border and screen resolution.
=$0010f0				FK_OPEN             = $0010F0 ; open a file for reading/writing/creating
=$0010f4				FK_CREATE           = $0010F4 ; create a new file
=$0010f8				FK_CLOSE            = $0010F8 ; close a file (make sure last cluster is written)
=$0010fc				FK_WRITE            = $0010FC ; write the current cluster to the file
=$001100				FK_READ             = $001100 ; read the next cluster from the file
=$001104				FK_DELETE           = $001104 ; delete a file / directory
=$001108				FK_DIROPEN          = $001108 ; open a directory and seek the first directory entry
=$00110c				FK_DIRNEXT          = $00110C ; seek to the next directory of an open directory
=$001110				FK_DIRREAD          = $001110 ; Read the directory entry for the specified file
=$001114				FK_DIRWRITE         = $001114 ; Write any changes in the current directory cluster back to the drive
=$001118				FK_LOAD             = $001118 ; load a binary file into memory, supports multiple file formats
=$00111c				FK_SAVE             = $00111C ; Save memory to a binary file
=$001124				FK_RUN              = $001124 ; Load and run an executable binary file
=$001130				FK_COPY             = $001130 ; Copy a file
=$001120				FK_CMDBLOCK         = $001120 ; Send a command to a block device
=0					CHAN_CONSOLE = 0
=1					CHAN_COM1 = 1
=2					CHAN_COM2 = 2
=$000f89				KEYBOARD_LOCKS   = $000F89 ;  1 Byte, the status of the various lock keys
=$01					KB_SCROLL_LOCK      = $01
=$02					KB_NUM_LOCK         = $02
=$04					KB_CAPS_LOCK        = $04

;******  Return to file: .\Heap\Heap.asm

.0e0000					START:
.0e0000	20 2d 03	jsr $0e032d	            JSR SETUP
.0e0003	c2 30		rep #$30	            REP #$30
.0e0005	08		php		            PHP
.0e0006	e2 20		sep #$20	            SEP #$20
.0e0008	48		pha		            PHA
.0e0009	a9 0e		lda #$0e	            LDA #`Strings.Ready
.0e000b	48		pha		            PHA
.0e000c	ab		plb		            PLB
.0e000d	68		pla		            PLA
.0e000e	28		plp		            PLP
.0e000f	a2 ad 04	ldx #$04ad	                LDX #<>Strings.Ready               ; Point to the message in an ASCIIZ string
.0e0012	22 1c 10 00	jsl $00101c	                JSL PUTS                 ; And ask the kernel to print it
.0e0016	c2 30		rep #$30	            REP #$30
.0e0018	a9 34 12	lda #$1234	    LDA #$1234
.0e001b	a2 78 56	ldx #$5678	    LDX #$5678
.0e001e	a0 ab 90	ldy #$90ab	    LDY #$90AB
.0e0021	20 72 03	jsr $0e0372	    JSR PrintTraceAXY
.0e0024	80 11		bra $0e0037	    BRA +
>0e0026	20 20 20 54 65 73 74 20		    .NULL "   ", "Test TraceAXY"
>0e002e	54 72 61 63 65 41 58 59 00
.0e0037					+
.0e0037	20 2d 01	jsr $0e012d	            JSR HeapManager.UnitTests.Init
.0e003a	20 f2 01	jsr $0e01f2	            JSR HeapManager.UnitTests.ResetCurrentBlock
.0e003d	20 47 03	jsr $0e0347	    JSR PrintTrace
.0e0040	80 18		bra $0e005a	    BRA +
>0e0042	20 20 20 48 65 61 70 4d		    .NULL "   ", "HeapManager.ZeroPage"
>0e004a	61 6e 61 67 65 72 2e 5a 65 72 6f 50 61 67 65 00
.0e005a					+
.0e005a	20 1b 04	jsr $0e041b	    JSR PrintMemory
.0e005d	80 05		bra $0e0064	    BRA +
>0e005f	a0 08 00			    .LONG $0008A0
>0e0062	06 00				    .WORD 6
.0e0064					+
.0e0064	20 47 03	jsr $0e0347	    JSR PrintTrace
.0e0067	80 16		bra $0e007f	    BRA +
>0e0069	20 20 20 48 65 61 70 4d		    .NULL "   ", "HeapManager.Header"
>0e0071	61 6e 61 67 65 72 2e 48 65 61 64 65 72 00
.0e007f					+
.0e007f	20 1b 04	jsr $0e041b	    JSR PrintMemory
.0e0082	80 05		bra $0e0089	    BRA +
>0e0084	00 00 0f			    .LONG HEAP_PAGE_START
>0e0087	0e 00				    .WORD SIZE(HeapManager.Header)
.0e0089					+
.0e0089	c2 20		rep #$20	            REP #$20
.0e008b	a5 a3		lda $a3		    LDA HeapManager.ZeroPage.BlockPointer
.0e008d	20 47 03	jsr $0e0347	    JSR PrintTrace
.0e0090	80 15		bra $0e00a7	    BRA +
>0e0092	20 20 20 48 65 61 70 4d		    .NULL "   ", "HeapManager.Block"
>0e009a	61 6e 61 67 65 72 2e 42 6c 6f 63 6b 00
.0e00a7					+
.0e00a7	8d af 00	sta $0e00af	    STA Address
.0e00aa	20 1b 04	jsr $0e041b	    JSR PrintMemory
.0e00ad	80 05		bra $0e00b4	    BRA +
.0e00af					Address
>0e00af	00 00				    .WORD 0
>0e00b1	0f				    .BYTE `HEAP_PAGE_START
>0e00b2	08 00				    .WORD SIZE(HeapManager.BlockHeader)
.0e00b4					+
.0e00b4	6b		rtl		    RTL

;******  Processing file: .\Heap\HeapManager.asm

.0e00b5					HeapManager

;******  Processing file: .\Heap\HeapManager_Data.asm

.0e00b5					ZeroPage
=$a0					    HeaderPointer       = $a0 ;.long ?
=$a3					    BlockPointer        = $a3 ;.long ?
=$a6					    RequestedSize       = $a6 ;.word ?
.0000					Header
>0000					    Start               .long ?
>0003					    End                 .long ?
>0006					    TotalSize           .word ?
>0008					    FirstBlock          .long ?
>000b					    CurrentBlock        .long ?
.0000					BlockHeader
>0000					    PrevBlock           .word ?
>0002					    NextBlock           .word ?
>0004					    RefCount            .word ?
>0006					    Size                .word ?

;******  Return to file: .\Heap\HeapManager.asm


;******  Processing file: .\Heap\HeapManager_Macros.asm


;******  Return to file: .\Heap\HeapManager.asm


;******  Processing file: .\Heap\HeapManager_Private.asm

.0e00b5					Private

;******  Return to file: .\Heap\HeapManager.asm


;******  Processing file: .\Heap\HeapManager_UnitTests.asm

.0e00b5					UnitTests
.0e00b5					Strings
>0e00b5	48 65 61 70 4d 61 6e 61		    Strings.Init:                .NULL "HeapManager.Init "
>0e00bd	67 65 72 2e 49 6e 69 74 20 00
>0e00c7	48 65 61 70 4d 61 6e 61		    Strings.ResetCurrentBlock:   .NULL "HeapManager.ResetCurrentBlock "
>0e00cf	67 65 72 2e 52 65 73 65 74 43 75 72 72 65 6e 74
>0e00df	42 6c 6f 63 6b 20 00
>0e00e6	48 65 61 70 4d 61 6e 61		    Strings.EmptyHeapMoves:      .NULL "HeapManager.EmptyHeapMoves "
>0e00ee	67 65 72 2e 45 6d 70 74 79 48 65 61 70 4d 6f 76
>0e00fe	65 73 20 00
>0e0102	50 61 73 73 65 64 0d 00		    Strings.Passed:              .NULL "Passed", 13
>0e010a	20 2d 20 46 61 69 6c 65		    Strings.Failed:              .NULL " - Failed", 13
>0e0112	64 0d 00
.0e0115					FailedUnitTest
.0e0115	22 80 10 00	jsl $001080	    JSL PRINTAH
.0e0119	c2 30		rep #$30	            REP #$30
.0e011b	08		php		            PHP
.0e011c	e2 20		sep #$20	            SEP #$20
.0e011e	48		pha		            PHA
.0e011f	a9 0e		lda #$0e	            LDA #`Strings.Failed
.0e0121	48		pha		            PHA
.0e0122	ab		plb		            PLB
.0e0123	68		pla		            PLA
.0e0124	28		plp		            PLP
.0e0125	a2 0a 01	ldx #$010a	                LDX #<>Strings.Failed               ; Point to the message in an ASCIIZ string
.0e0128	22 1c 10 00	jsl $00101c	                JSL PUTS                 ; And ask the kernel to print it
.0e012c	60		rts		            RTS
.0e012d					Init
.0e012d	c2 20		rep #$20	            REP #$20
.0e012f	a9 00 00	lda #$0000	    LDA #0
.0e0132	e2 20		sep #$20	            SEP #$20
.0e0134	c2 10		rep #$10	            REP #$10
.0e0136	a9 0f		lda #$0f	    LDA #`HEAP_PAGE_START
.0e0138	a2 00 00	ldx #$0000	    LDX #<>HEAP_PAGE_START
.0e013b	a0 ff ff	ldy #$ffff	    LDY #<>HEAP_PAGE_END
.0e013e	20 3a 02	jsr $0e023a	            JSR HeapManager.Init
.0e0141	c2 30		rep #$30	            REP #$30
.0e0143	08		php		            PHP
.0e0144	e2 20		sep #$20	            SEP #$20
.0e0146	48		pha		            PHA
.0e0147	a9 0e		lda #$0e	            LDA #`Strings.Init
.0e0149	48		pha		            PHA
.0e014a	ab		plb		            PLB
.0e014b	68		pla		            PLA
.0e014c	28		plp		            PLP
.0e014d	a2 b5 00	ldx #$00b5	                LDX #<>Strings.Init               ; Point to the message in an ASCIIZ string
.0e0150	22 1c 10 00	jsl $00101c	                JSL PUTS                 ; And ask the kernel to print it
.0e0154	e2 20		sep #$20	            SEP #$20
.0e0156	a0 02 00	ldy #$0002	    LDY #HeapManager.Header.Start + 2
.0e0159	b7 a0		lda [$a0],y	    LDA [ZeroPage.HeaderPointer], Y
.0e015b	c9 0f		cmp #$0f	    CMP #`HEAP_PAGE_START
.0e015d	f0 08		beq $0e0167	    BEQ +
.0e015f	e2 20		sep #$20	            SEP #$20
.0e0161	a9 00		lda #$00	    LDA #0
.0e0163	20 15 01	jsr $0e0115	            JSR FailedUnitTest
.0e0166	60		rts		            RTS
.0e0167					+
.0e0167	c2 20		rep #$20	            REP #$20
.0e0169	a0 00 00	ldy #$0000	    LDY #HeapManager.Header.Start
.0e016c	b7 a0		lda [$a0],y	    LDA [ZeroPage.HeaderPointer], Y
.0e016e	c9 00 00	cmp #$0000	    CMP #<>HEAP_PAGE_START
.0e0171	f0 08		beq $0e017b	    BEQ +
.0e0173	e2 20		sep #$20	            SEP #$20
.0e0175	a9 01		lda #$01	    LDA #1
.0e0177	20 15 01	jsr $0e0115	            JSR FailedUnitTest
.0e017a	60		rts		            RTS
.0e017b					+
.0e017b	e2 20		sep #$20	            SEP #$20
.0e017d	a0 05 00	ldy #$0005	    LDY #HeapManager.Header.End + 2
.0e0180	b7 a0		lda [$a0],y	    LDA [ZeroPage.HeaderPointer], Y
.0e0182	c9 0f		cmp #$0f	    CMP #`HEAP_PAGE_END
.0e0184	f0 08		beq $0e018e	    BEQ +
.0e0186	e2 20		sep #$20	            SEP #$20
.0e0188	a9 02		lda #$02	    LDA #2
.0e018a	20 15 01	jsr $0e0115	            JSR FailedUnitTest
.0e018d	60		rts		            RTS
.0e018e					+
.0e018e	c2 20		rep #$20	            REP #$20
.0e0190	a0 03 00	ldy #$0003	    LDY #HeapManager.Header.End
.0e0193	b7 a0		lda [$a0],y	    LDA [ZeroPage.HeaderPointer], Y
.0e0195	c9 ff ff	cmp #$ffff	    CMP #<>HEAP_PAGE_END
.0e0198	f0 08		beq $0e01a2	    BEQ +
.0e019a	e2 20		sep #$20	            SEP #$20
.0e019c	a9 03		lda #$03	    LDA #3
.0e019e	20 15 01	jsr $0e0115	            JSR FailedUnitTest
.0e01a1	60		rts		            RTS
.0e01a2					+
.0e01a2	c2 20		rep #$20	            REP #$20
.0e01a4	a0 06 00	ldy #$0006	    LDY #HeapManager.Header.TotalSize
.0e01a7	b7 a0		lda [$a0],y	    LDA [ZeroPage.HeaderPointer], Y
.0e01a9	c9 f1 ff	cmp #$fff1	    CMP #(<>HEAP_PAGE_END - <>HEAP_PAGE_START) - SIZE(HeapManager.Header)
.0e01ac	f0 08		beq $0e01b6	    BEQ +
.0e01ae	e2 20		sep #$20	            SEP #$20
.0e01b0	a9 04		lda #$04	    LDA #4
.0e01b2	20 15 01	jsr $0e0115	            JSR FailedUnitTest
.0e01b5	60		rts		            RTS
.0e01b6					+
.0e01b6	e2 20		sep #$20	            SEP #$20
.0e01b8	a0 0a 00	ldy #$000a	    LDY #HeapManager.Header.FirstBlock + 2
.0e01bb	b7 a0		lda [$a0],y	    LDA [ZeroPage.HeaderPointer], Y
.0e01bd	c9 0f		cmp #$0f	    CMP #`HEAP_PAGE_START
.0e01bf	f0 08		beq $0e01c9	    BEQ +
.0e01c1	e2 20		sep #$20	            SEP #$20
.0e01c3	a9 05		lda #$05	    LDA #5
.0e01c5	20 15 01	jsr $0e0115	            JSR FailedUnitTest
.0e01c8	60		rts		            RTS
.0e01c9					+
.0e01c9	c2 20		rep #$20	            REP #$20
.0e01cb	a0 08 00	ldy #$0008	    LDY #HeapManager.Header.FirstBlock
.0e01ce	b7 a0		lda [$a0],y	    LDA [ZeroPage.HeaderPointer], Y
.0e01d0	c9 0e 00	cmp #$000e	    CMP #(<>HEAP_PAGE_START + SIZE(HeapManager.Header))
.0e01d3	f0 08		beq $0e01dd	    BEQ +
.0e01d5	e2 20		sep #$20	            SEP #$20
.0e01d7	a9 06		lda #$06	    LDA #6
.0e01d9	20 15 01	jsr $0e0115	            JSR FailedUnitTest
.0e01dc	60		rts		            RTS
.0e01dd					+
.0e01dd	c2 30		rep #$30	            REP #$30
.0e01df	08		php		            PHP
.0e01e0	e2 20		sep #$20	            SEP #$20
.0e01e2	48		pha		            PHA
.0e01e3	a9 0e		lda #$0e	            LDA #`Strings.Passed
.0e01e5	48		pha		            PHA
.0e01e6	ab		plb		            PLB
.0e01e7	68		pla		            PLA
.0e01e8	28		plp		            PLP
.0e01e9	a2 02 01	ldx #$0102	                LDX #<>Strings.Passed               ; Point to the message in an ASCIIZ string
.0e01ec	22 1c 10 00	jsl $00101c	                JSL PUTS                 ; And ask the kernel to print it
.0e01f0	60		rts		            RTS
.0e01f1	60		rts		            RTS
.0e01f2					ResetCurrentBlock
.0e01f2	e2 20		sep #$20	            SEP #$20
.0e01f4	c2 10		rep #$10	            REP #$10
.0e01f6	a9 0f		lda #$0f	    LDA #`HEAP_PAGE_START
.0e01f8	a2 00 00	ldx #$0000	    LDX #<>HEAP_PAGE_START
.0e01fb	a0 ff ff	ldy #$ffff	    LDY #<>HEAP_PAGE_END
.0e01fe	c2 30		rep #$30	            REP #$30
.0e0200	08		php		            PHP
.0e0201	e2 20		sep #$20	            SEP #$20
.0e0203	48		pha		            PHA
.0e0204	a9 0e		lda #$0e	            LDA #`Strings.ResetCurrentBlock
.0e0206	48		pha		            PHA
.0e0207	ab		plb		            PLB
.0e0208	68		pla		            PLA
.0e0209	28		plp		            PLP
.0e020a	a2 c7 00	ldx #$00c7	                LDX #<>Strings.ResetCurrentBlock               ; Point to the message in an ASCIIZ string
.0e020d	22 1c 10 00	jsl $00101c	                JSL PUTS                 ; And ask the kernel to print it
.0e0211	c2 30		rep #$30	            REP #$30
.0e0213	08		php		            PHP
.0e0214	e2 20		sep #$20	            SEP #$20
.0e0216	48		pha		            PHA
.0e0217	a9 0e		lda #$0e	            LDA #`Strings.Passed
.0e0219	48		pha		            PHA
.0e021a	ab		plb		            PLB
.0e021b	68		pla		            PLA
.0e021c	28		plp		            PLP
.0e021d	a2 02 01	ldx #$0102	                LDX #<>Strings.Passed               ; Point to the message in an ASCIIZ string
.0e0220	22 1c 10 00	jsl $00101c	                JSL PUTS                 ; And ask the kernel to print it
.0e0224	80 13		bra $0e0239	    BRA +
.0e0226					FAILED:
.0e0226	c2 30		rep #$30	            REP #$30
.0e0228	08		php		            PHP
.0e0229	e2 20		sep #$20	            SEP #$20
.0e022b	48		pha		            PHA
.0e022c	a9 0e		lda #$0e	            LDA #`Strings.Failed
.0e022e	48		pha		            PHA
.0e022f	ab		plb		            PLB
.0e0230	68		pla		            PLA
.0e0231	28		plp		            PLP
.0e0232	a2 0a 01	ldx #$010a	                LDX #<>Strings.Failed               ; Point to the message in an ASCIIZ string
.0e0235	22 1c 10 00	jsl $00101c	                JSL PUTS                 ; And ask the kernel to print it
.0e0239					+
.0e0239	60		rts		            RTS

;******  Return to file: .\Heap\HeapManager.asm

.0e023a					Init
.0e023a	20 72 03	jsr $0e0372	    JSR PrintTraceAXY
.0e023d	80 14		bra $0e0253	    BRA +
>0e023f	20 20 20 48 65 61 70 4d		    .NULL "   ", "HeapManager.Init"
>0e0247	61 6e 61 67 65 72 2e 49 6e 69 74 00
.0e0253					+
.0e0253	48		pha		    PHA
.0e0254	da		phx		    PHX
.0e0255	5a		phy		    PHY
.0e0256	08		php		    PHP
.0e0257	5a		phy		    PHY
.0e0258	20 d4 02	jsr $0e02d4	            JSR SetupZeroPage
.0e025b	e2 20		sep #$20	            SEP #$20
.0e025d	85 a5		sta $a5		    STA ZeroPage.BlockPointer + 2 ; ZP_HEAP_MANAGER_BLOCK_POINTER + 2
.0e025f	c2 20		rep #$20	            REP #$20
.0e0261	8a		txa		    TXA
.0e0262	18		clc		    CLC
.0e0263	69 0e 00	adc #$000e	    ADC #SIZE(Header)
.0e0266	85 a3		sta $a3		    STA ZeroPage.BlockPointer
.0e0268	c2 20		rep #$20	            REP #$20
.0e026a	a5 a0		lda $a0		    LDA ZeroPage.HeaderPointer ; ZP_HEAP_MANAGER_HEADER_POINTER
.0e026c	a0 00 00	ldy #$0000	    LDY #Header.Start
.0e026f	97 a0		sta [$a0],y	    STA [ZeroPage.HeaderPointer], Y
.0e0271	e2 20		sep #$20	            SEP #$20
.0e0273	a5 a2		lda $a2		    LDA ZeroPage.HeaderPointer + 2
.0e0275	a0 02 00	ldy #$0002	    LDY #Header.Start + 2
.0e0278	97 a0		sta [$a0],y	    STA [ZeroPage.HeaderPointer], Y
.0e027a	c2 20		rep #$20	            REP #$20
.0e027c	68		pla		    PLA
.0e027d	a0 03 00	ldy #$0003	    LDY #Header.End
.0e0280	97 a0		sta [$a0],y	    STA [ZeroPage.HeaderPointer], Y
.0e0282	e2 20		sep #$20	            SEP #$20
.0e0284	a5 a2		lda $a2		    LDA ZeroPage.HeaderPointer + 2
.0e0286	a0 05 00	ldy #$0005	    LDY #Header.End + 2
.0e0289	97 a0		sta [$a0],y	    STA [ZeroPage.HeaderPointer], Y
.0e028b	c2 20		rep #$20	            REP #$20
.0e028d	a0 03 00	ldy #$0003	    LDY #Header.End
.0e0290	b7 a0		lda [$a0],y	    LDA [ZeroPage.HeaderPointer], Y
.0e0292	38		sec		    SEC
.0e0293	e5 a0		sbc $a0		    SBC ZeroPage.HeaderPointer  ; This is equal to HEAP_MANAGER_START
.0e0295	e9 0e 00	sbc #$000e	    SBC #SIZE(Header)
.0e0298	a0 06 00	ldy #$0006	    LDY #Header.TotalSize
.0e029b	97 a0		sta [$a0],y	    STA [ZeroPage.HeaderPointer], Y
.0e029d	e2 20		sep #$20	            SEP #$20
.0e029f	a5 a5		lda $a5		    LDA ZeroPage.BlockPointer + 2
.0e02a1	a0 0a 00	ldy #$000a	    LDY #Header.FirstBlock + 2
.0e02a4	97 a0		sta [$a0],y	    STA [ZeroPage.HeaderPointer], Y
.0e02a6	c2 20		rep #$20	            REP #$20
.0e02a8	a5 a3		lda $a3		    LDA ZeroPage.BlockPointer
.0e02aa	a0 08 00	ldy #$0008	    LDY #Header.FirstBlock
.0e02ad	97 a0		sta [$a0],y	    STA [ZeroPage.HeaderPointer], Y
.0e02af	a9 00 00	lda #$0000	    LDA #0
.0e02b2	a0 00 00	ldy #$0000	    LDY #BlockHeader.PrevBlock
.0e02b5	97 a3		sta [$a3],y	    STA [ZeroPage.BlockPointer], Y
.0e02b7	a0 02 00	ldy #$0002	    LDY #BlockHeader.NextBlock
.0e02ba	97 a3		sta [$a3],y	    STA [ZeroPage.BlockPointer], Y
.0e02bc	a0 04 00	ldy #$0004	    LDY #BlockHeader.RefCount
.0e02bf	97 a3		sta [$a3],y	    STA [ZeroPage.BlockPointer], Y
.0e02c1	a0 06 00	ldy #$0006	    LDY #Header.TotalSize
.0e02c4	b7 a0		lda [$a0],y	    LDA [ZeroPage.HeaderPointer], Y
.0e02c6	38		sec		    SEC
.0e02c7	e9 08 00	sbc #$0008	    SBC #SIZE(BlockHeader)
.0e02ca	a0 06 00	ldy #$0006	    LDY #BlockHeader.Size
.0e02cd	97 a3		sta [$a3],y	    STA [ZeroPage.BlockPointer], Y
.0e02cf	28		plp		    PLP
.0e02d0	7a		ply		    PLY
.0e02d1	fa		plx		    PLX
.0e02d2	68		pla		    PLA
.0e02d3	60		rts		            RTS
.0e02d4					SetupZeroPage
.0e02d4	20 47 03	jsr $0e0347	    JSR PrintTrace
.0e02d7	80 1e		bra $0e02f7	    BRA +
>0e02d9	20 20 20 48 65 61 70 4d		    .NULL "   ", "HeapManager.SetupZeroPage", 13
>0e02e1	61 6e 61 67 65 72 2e 53 65 74 75 70 5a 65 72 6f
>0e02f1	50 61 67 65 0d 00
.0e02f7					+
.0e02f7	48		pha		    PHA
.0e02f8	da		phx		    PHX
.0e02f9	5a		phy		    PHY
.0e02fa	08		php		    PHP
.0e02fb	e2 20		sep #$20	            SEP #$20
.0e02fd	85 a2		sta $a2		    STA ZeroPage.HeaderPointer + 2
.0e02ff	c2 20		rep #$20	            REP #$20
.0e0301	8a		txa		    TXA
.0e0302	85 a0		sta $a0		    STA ZeroPage.HeaderPointer
.0e0304	28		plp		    PLP
.0e0305	7a		ply		    PLY
.0e0306	fa		plx		    PLX
.0e0307	68		pla		    PLA
.0e0308	60		rts		            RTS

;******  Return to file: .\Heap\Heap.asm


;******  Processing file: .\Heap\../Common/Common.asm

.0e0309					RESET_SCREEN:
.0e0309	e2 20		sep #$20	            SEP #$20
.0e030b	c2 10		rep #$10	            REP #$10
.0e030d	a2 00 00	ldx #$0000	        LDX #0
.0e0310	a9 20		lda #$20	-       LDA #' '
.0e0312	9f 00 a0 af	sta $afa000,x	        STA @l SCREEN_TEXT_MEM, X
.0e0316	a9 20		lda #$20	        LDA #TEXT_COLOR
.0e0318	9f 00 c0 af	sta $afc000,x	        STA @l SCREEN_TEXT_COL, X
.0e031c	e8		inx		        INX
.0e031d	e0 c0 12	cpx #$12c0	        CPX #(NUM_COLS * NUM_ROWS)
.0e0320	d0 ee		bne $0e0310	        BNE -
.0e0322	a2 00 00	ldx #$0000	        LDX #0
.0e0325	a0 00 00	ldy #$0000	        LDY #0
.0e0328	22 84 10 00	jsl $001084	        JSL LOCATE
.0e032c	60		rts		            RTS
.0e032d					SETUP:
.0e032d	18		clc		        CLC                         ; Make sure we're native mode
.0e032e	fb		xce		        XCE
.0e032f	e2 20		sep #$20	            SEP #$20
.0e0331	c2 10		rep #$10	            REP #$10
.0e0333	a9 20		lda #$20	        LDA #TEXT_COLOR            ; Set the Text Color (Green Text on Black Background)
.0e0335	8f 1e 00 00	sta $00001e	        STA @lCUR_COLOR             ; @l forces 24 bit addressing mode...
.0e0339	a9 00		lda #$00	        LDA #$00                    ; Set to No Border
.0e033b	8f 04 00 af	sta $af0004	        STA @lBORDER_CTRL_REG
.0e033f	22 2c 11 00	jsl $00112c	        JSL FK_SETSIZES
.0e0343	20 09 03	jsr $0e0309	            JSR RESET_SCREEN
.0e0346	60		rts		            RTS
.0e0347					PrintTrace
.0e0347	08		php		        PHP
.0e0348	c2 30		rep #$30	            REP #$30
.0e034a	48		pha		        PHA
.0e034b	da		phx		        PHX
.0e034c	5a		phy		        PHY
.0e034d	8b		phb		        PHB
.0e034e	0b		phd		        PHD
.0e034f	c2 30		rep #$30	            REP #$30
.0e0351	a3 0b		lda $0b,s	        LDA 11,S        ; Get the return address
.0e0353					calc_addr
.0e0353	18		clc		        CLC
.0e0354	69 03 00	adc #$0003	        ADC #3          ; Add 3 to skip over the following branch
.0e0357	aa		tax		        TAX
.0e0358	e2 20		sep #$20	            SEP #$20
.0e035a	a9 0e		lda #$0e	        LDA #`PrintTrace
.0e035c	48		pha		        PHA
.0e035d	ab		plb		        PLB
.0e035e					pr_loop
.0e035e	bd 00 00	lda $0e0000,x	        LDA #0,B,X
.0e0361	f0 06		beq $0e0369	        BEQ done
.0e0363	20 92 04	jsr $0e0492	            JSR ScreenPutChar
.0e0366	e8		inx		        INX
.0e0367	80 f5		bra $0e035e	        BRA pr_loop
.0e0369					done
.0e0369	c2 30		rep #$30	            REP #$30
.0e036b	2b		pld		        PLD
.0e036c	ab		plb		        PLB
.0e036d	7a		ply		        PLY
.0e036e	fa		plx		        PLX
.0e036f	68		pla		        PLA
.0e0370	28		plp		        PLP
.0e0371	60		rts		        RTS
.0e0372					PrintTraceAXY
.0e0372	08		php		        PHP
.0e0373	c2 30		rep #$30	            REP #$30
.0e0375	48		pha		        PHA
.0e0376	da		phx		        PHX
.0e0377	5a		phy		        PHY
.0e0378	8b		phb		        PHB
.0e0379	0b		phd		        PHD
.0e037a	5a		phy		        PHY
.0e037b	da		phx		        PHX
.0e037c	48		pha		        PHA
.0e037d	c2 30		rep #$30	            REP #$30
.0e037f	a3 11		lda $11,s	        LDA 17,S        ; Get the return address
.0e0381					calc_addr
.0e0381	18		clc		        CLC
.0e0382	69 03 00	adc #$0003	        ADC #3          ; Add 3 to skip over the following branch
.0e0385	aa		tax		        TAX
.0e0386	e2 20		sep #$20	            SEP #$20
.0e0388	a9 0e		lda #$0e	        LDA #`PrintTraceAXY
.0e038a	48		pha		        PHA
.0e038b	ab		plb		        PLB
.0e038c					pr_loop
.0e038c	bd 00 00	lda $0e0000,x	        LDA #0,B,X
.0e038f	f0 06		beq $0e0397	        BEQ done
.0e0391	20 92 04	jsr $0e0492	            JSR ScreenPutChar
.0e0394	e8		inx		        INX
.0e0395	80 f5		bra $0e038c	        BRA pr_loop
.0e0397					done
.0e0397	e2 20		sep #$20	            SEP #$20
.0e0399	a9 28		lda #$28	        LDA#'('
.0e039b	20 92 04	jsr $0e0492	            JSR ScreenPutChar
.0e039e	a9 41		lda #$41	        LDA#'A'
.0e03a0	20 92 04	jsr $0e0492	            JSR ScreenPutChar
.0e03a3	a9 3d		lda #$3d	        LDA#'='
.0e03a5	20 92 04	jsr $0e0492	            JSR ScreenPutChar
.0e03a8	c2 20		rep #$20	            REP #$20
.0e03aa	68		pla		        PLA
.0e03ab	48		pha		        PHA
.0e03ac	e2 20		sep #$20	            SEP #$20
.0e03ae	eb		xba		        XBA
.0e03af	22 80 10 00	jsl $001080	        JSL PRINTAH
.0e03b3	c2 20		rep #$20	            REP #$20
.0e03b5	68		pla		        PLA
.0e03b6	e2 20		sep #$20	            SEP #$20
.0e03b8	22 80 10 00	jsl $001080	        JSL PRINTAH
.0e03bc	e2 20		sep #$20	            SEP #$20
.0e03be	a9 2c		lda #$2c	        LDA#','
.0e03c0	20 92 04	jsr $0e0492	            JSR ScreenPutChar
.0e03c3	a9 58		lda #$58	        LDA#'X'
.0e03c5	20 92 04	jsr $0e0492	            JSR ScreenPutChar
.0e03c8	a9 3d		lda #$3d	        LDA#'='
.0e03ca	20 92 04	jsr $0e0492	            JSR ScreenPutChar
.0e03cd	c2 20		rep #$20	            REP #$20
.0e03cf	68		pla		        PLA
.0e03d0	48		pha		        PHA
.0e03d1	e2 20		sep #$20	            SEP #$20
.0e03d3	eb		xba		        XBA
.0e03d4	22 80 10 00	jsl $001080	        JSL PRINTAH
.0e03d8	c2 20		rep #$20	            REP #$20
.0e03da	68		pla		        PLA
.0e03db	e2 20		sep #$20	            SEP #$20
.0e03dd	22 80 10 00	jsl $001080	        JSL PRINTAH
.0e03e1	e2 20		sep #$20	            SEP #$20
.0e03e3	a9 2c		lda #$2c	        LDA#','
.0e03e5	20 92 04	jsr $0e0492	            JSR ScreenPutChar
.0e03e8	a9 59		lda #$59	        LDA#'Y'
.0e03ea	20 92 04	jsr $0e0492	            JSR ScreenPutChar
.0e03ed	a9 3d		lda #$3d	        LDA#'='
.0e03ef	20 92 04	jsr $0e0492	            JSR ScreenPutChar
.0e03f2	c2 20		rep #$20	            REP #$20
.0e03f4	68		pla		        PLA
.0e03f5	48		pha		        PHA
.0e03f6	e2 20		sep #$20	            SEP #$20
.0e03f8	eb		xba		        XBA
.0e03f9	22 80 10 00	jsl $001080	        JSL PRINTAH
.0e03fd	c2 20		rep #$20	            REP #$20
.0e03ff	68		pla		        PLA
.0e0400	e2 20		sep #$20	            SEP #$20
.0e0402	22 80 10 00	jsl $001080	        JSL PRINTAH
.0e0406	e2 20		sep #$20	            SEP #$20
.0e0408	a9 29		lda #$29	        LDA#')'
.0e040a	20 92 04	jsr $0e0492	            JSR ScreenPutChar
.0e040d	a9 0d		lda #$0d	        LDA #13
.0e040f	20 92 04	jsr $0e0492	            JSR ScreenPutChar
.0e0412	c2 30		rep #$30	            REP #$30
.0e0414	2b		pld		        PLD
.0e0415	ab		plb		        PLB
.0e0416	7a		ply		        PLY
.0e0417	fa		plx		        PLX
.0e0418	68		pla		        PLA
.0e0419	28		plp		        PLP
.0e041a	60		rts		        RTS
.0e041b					PrintMemory
.0e041b	08		php		        PHP
.0e041c	c2 30		rep #$30	            REP #$30
.0e041e	48		pha		        PHA
.0e041f	da		phx		        PHX
.0e0420	5a		phy		        PHY
.0e0421	8b		phb		        PHB
.0e0422	0b		phd		        PHD
.0e0423	c2 30		rep #$30	            REP #$30
.0e0425	a3 0b		lda $0b,s	        LDA 11,S        ; Get the return address
.0e0427					calc_addr
.0e0427	18		clc		        CLC
.0e0428	69 03 00	adc #$0003	        ADC #3          ; Add 3 to skip over the following branch
.0e042b	aa		tax		        TAX
.0e042c	e2 20		sep #$20	            SEP #$20
.0e042e	a9 0e		lda #$0e	        LDA #`PrintTraceAXY
.0e0430	48		pha		        PHA
.0e0431	ab		plb		        PLB
.0e0432	e2 20		sep #$20	            SEP #$20
.0e0434	e8		inx		        INX
.0e0435	e8		inx		        INX
.0e0436	bd 00 00	lda $0e0000,x	        LDA #0,B,X
.0e0439	85 aa		sta $aa		        STA TraceMemoryStart + 2
.0e043b	ca		dex		        DEX
.0e043c	ca		dex		        DEX
.0e043d	c2 20		rep #$20	            REP #$20
.0e043f	bd 00 00	lda $0e0000,x	        LDA #0,B,X
.0e0442	85 a8		sta $a8		        STA TraceMemoryStart
.0e0444	e8		inx		        INX
.0e0445	e8		inx		        INX
.0e0446	e8		inx		        INX
.0e0447	bd 00 00	lda $0e0000,x	        LDA #0,B,X
.0e044a	aa		tax		        TAX
.0e044b	a0 00 00	ldy #$0000	        LDY #0
.0e044e	e2 20		sep #$20	            SEP #$20
.0e0450	a9 20		lda #$20	        LDA #' '
.0e0452	20 92 04	jsr $0e0492	            JSR ScreenPutChar
.0e0455	a5 aa		lda $aa		        LDA TraceMemoryStart + 2
.0e0457	22 80 10 00	jsl $001080	        JSL PRINTAH
.0e045b	a9 3a		lda #$3a	        LDA #':'
.0e045d	20 92 04	jsr $0e0492	            JSR ScreenPutChar
.0e0460	a5 a9		lda $a9		        LDA TraceMemoryStart + 1
.0e0462	22 80 10 00	jsl $001080	        JSL PRINTAH
.0e0466	a5 a8		lda $a8		        LDA TraceMemoryStart
.0e0468	22 80 10 00	jsl $001080	        JSL PRINTAH
.0e046c	a9 20		lda #$20	        LDA #' '
.0e046e	20 92 04	jsr $0e0492	            JSR ScreenPutChar
.0e0471					loop
.0e0471	b7 a8		lda [$a8],y	        LDA [TraceMemoryStart], Y
.0e0473	22 80 10 00	jsl $001080	        JSL PRINTAH
.0e0477	ca		dex		        DEX
.0e0478	f0 08		beq $0e0482	        BEQ +
.0e047a	c8		iny		        INY
.0e047b	a9 20		lda #$20	        LDA #' '
.0e047d	20 92 04	jsr $0e0492	            JSR ScreenPutChar
.0e0480	80 ef		bra $0e0471	        BRA loop
.0e0482					+
.0e0482	e2 20		sep #$20	            SEP #$20
.0e0484	a9 0d		lda #$0d	        LDA #13
.0e0486	20 92 04	jsr $0e0492	            JSR ScreenPutChar
.0e0489	c2 30		rep #$30	            REP #$30
.0e048b	2b		pld		        PLD
.0e048c	ab		plb		        PLB
.0e048d	7a		ply		        PLY
.0e048e	fa		plx		        PLX
.0e048f	68		pla		        PLA
.0e0490	28		plp		        PLP
.0e0491	60		rts		        RTS
.0e0492					ScreenPutChar
.0e0492	08		php		        PHP
.0e0493	e2 20		sep #$20	            SEP #$20
.0e0495	48		pha		        PHA
.0e0496	48		pha		        PHA
.0e0497	a9 00		lda #$00	        LDA #CHAN_CONSOLE       ; Switch to the console device
.0e0499	22 3c 10 00	jsl $00103c	        JSL FK_SETOUT
.0e049d	68		pla		        PLA
.0e049e	22 18 10 00	jsl $001018	        JSL FK_PUTC
.0e04a2					loop
.0e04a2	af 89 0f 00	lda $000f89	        LDA @lKEYBOARD_LOCKS    ; Check the status of the lock keys
.0e04a6	29 01		and #$01	        AND #KB_SCROLL_LOCK     ; Is Scroll Lock pressed?
.0e04a8	d0 f8		bne $0e04a2	        BNE loop                ; Yes: wait until it's released
.0e04aa	68		pla		        PLA
.0e04ab	28		plp		        PLP
.0e04ac	60		rts		            RTS

;******  Return to file: .\Heap\Heap.asm

.0e04ad					Strings
>0e04ad	48 65 61 70 4d 61 6e 61		    Ready:                        .NULL "HeapManager.UnitTests Ready", 13, 13
>0e04b5	67 65 72 2e 55 6e 69 74 54 65 73 74 73 20 52 65
>0e04c5	61 64 79 0d 0d 00
>0e04cb					MY_HEAP_MANAGER .long ?

;******  End of listing
